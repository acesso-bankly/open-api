openapi: 3.0.1
info:
  version: 1.0.0
  title: Gestão de cartões
  description: |
    Solicite e gerencie cartões vinculados à conta do seu cliente em poucos
    minutos. Consulte também nossa
    [documentação](https://bankly.readme.io/v1.0/docs/) para mais detalhes sobre
    os fluxos de negócio.
servers:
  - url: 'https://api-mtls.sandbox.bankly.com.br'
paths:
  /cards/batches/:
    post:
      tags:
        - Cartões No Name
      summary: Criação de cartão em lote
      description: |
        <div class="bkly-ref-description">
          <p>Crie um lote de cartões sem vínculo com uma conta (Cartão No Name).</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
      operationId: cardCreateCardsInLot
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCardsInLotRequest"
      responses:
        '202':
          description: A solicitação foi aceita e o cartão em lote está sendo criado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createCardInLotResponse"
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ Program Id must not be empty. ], reasons: [] },
                              { code: required, message: [ Quantity Cards must not be empty. ], reasons: [] },
                              { code: required, message: [ Address must not be empty. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '406':
          description: A requisição é válida, porém não foi aceita devido a alguma regra de negócio contratada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 115, message: [ Program does not belong to lot! ], reasons: [] }]
        '409':
          description: Requisição em conflito com as regras de negócio contratada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
          uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/
          passthroughBehavior: when_no_match
          connectionType: VPC_LINK
          connectionId: m116y5
          httpMethod: POST
          type: http
          requestParameters:
            integration.request.header.api-version: method.request.header.api-version
            integration.request.header.Authorization: method.request.header.Authorization
          responses:
            '202':
              statusCode: 202
            '400':
              statusCode: 400
            '401':
              statusCode: 401
            '406':
              statusCode: 406
            '409':
              statusCode: 409
            '500':
              statusCode: 500
  
  /cards/activateCode/{activateCode}/binding/:
    patch:
      tags:
        - Cartões No Name
      summary: Vinculação do cartão com uma conta bancária
      description: |
        <div class="bkly-ref-description">
          <p>Vincule um cartão a uma conta, para que ele seja ativado e para que seja possível definir uma senha para ele.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
      operationId: cardbindNoName
      parameters:
        - name: activateCode
          in: path
          required: true
          schema:
            type: string
            description: Código de ativação do cartão (12 caracteres).
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bindNoNameRequest"
      responses:
        '200':
          description: Vínculo realizado.
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: length, message: [ Password must be 4 characters in length. You entered 5 characters. ], reasons: [] },
                            { code: required, message: [ Document must not be empty. ], reasons: [] },
                            { code: required, message: [ Bank Agency must not be empty. ], reasons: [] },
                            { code: required, message: [ Bank Account must not be empty. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: O cartão não existe.
        '409':
          description: Requisição em conflito com as regras de negócio contratadas.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]   
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{activateCode}/bindNoName
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.activateCode: method.request.path.activateCode
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/batches/:{lotId}:
    get:
      tags:
        - Cartões No Name
      summary: Consulta de lote por ID
      description: |
        <div class="bkly-ref-description">
          <p>Obtenha os dados de um lote específico de cartões.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardGetLotById
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            description: Id do lote a ser consultado.
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação recebida com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardLotResponse"
              examples:
                response:
                  value:
                    lotId: "LT01"
                    quantityOrder: 1000
                    companyKey: "Acesso"
                    dateOrder: "2021-06-07T08:30:40"
                    programId: 1
                    address:
                      zipCode: "05402100"
                      address: Avenida Rebouças
                      number: "1368"
                      neighborhood: Pinheiros
                      complement: Em frente a Wizard
                      city: São Paulo
                      state: SP
                      country: Brasil
                    cards: [
                        "2500011000021160417",
                        "2500011000068618940" 
                    ]
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: length, message: [ Password must be 4 characters in length. You entered 5 characters. ], reasons: [] },
                            { code: required, message: [ Document must not be empty. ], reasons: [] },
                            { code: required, message: [ Bank Agency must not be empty. ], reasons: [] },
                            { code: required, message: [ Bank Account must not be empty. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: Lote não encontrado.
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/{id}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.id: method.request.path.id
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '500':
            statusCode: 500

  /cards/batches:
    get:
      tags:
        - Cartões No Name
      summary: Consulta dos lotes
      description: |
        <div class="bkly-ref-description">
          <p>Obtenha os dados de todos os lotes de cartões. </p>  
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardGetLotsByCompanyKey
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação recebida com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardLotsResponse"
              examples:
                response:
                  value:
                    lotId: "LT01"
                    quantityOrder: 1000
                    companyKey: "Acesso"
                    dateOrder: "2021-06-07T08:30:40"
                    programId: 1
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: length, message: [ Password must be 4 characters in length. You entered 5 characters. ], reasons: [] },
                            { code: required, message: [ Document must not be empty. ], reasons: [] },
                            { code: required, message: [ Bank Agency must not be empty. ], reasons: [] },
                            { code: required, message: [ Bank Account must not be empty. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: Não foram encontrados lotes para essa company key.              
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '204':
            statusCode: 204      
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '500':
            statusCode: 500
  

  /cards/virtual:
    post:
      tags:
        - Criação de cartão
      summary: Cartão virtual
      description:  |
        <div class="bkly-ref-description">
          <p>Crie um cartão virtual que será utilizado em compras não presenciais.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>  
      operationId: cardCreateVirtualCard
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCardRequest"
      responses:
        '202':
          description: A solicitação foi aceita e o cartão está sendo criado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
              examples:
                response:
                  value:
                    proxy: "2370021007715002820"
                    activateCode: "A0DDDC0951D1"
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ Card Name must not be empty ], reasons: [] }, { code: conflict, message: [ Alias is not in the correct format ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '406':
          description: A requisição é válida, porém não foi aceita devido a alguma regra de negócio contratada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 202, message: [ Account does not belong to the customer! ], reasons: [] }]
        '409':
          description: A requisição com os dados enviados já foi realizada e está em processamento.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/virtual
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '406':
            statusCode: 406
          '409':
            statusCode: 409
          '500':
            statusCode: 500
  
  /cards/physical:
    post:
      tags:
        - Criação de cartão
      summary: Cartão físico
      description:  |
        <div class="bkly-ref-description">
          <p>Crie um cartão físico que será embossado e entregue no endereço informado.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
      operationId: cardCreatePhysicalCard
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCardRequest"
      responses:
        '202':
          description: A solicitação foi aceita e o cartão está sendo criado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
              examples:
                response:
                  value:
                    proxy: "2370021007715002820"
                    activateCode: "A0DDDC0951D1"
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ Card Name must not be empty ], reasons: [] }, { code: conflict, message: [ Alias is not in the correct format ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '406':
          description: Quando a requisição é válida, porém não foi aceita devido a alguma regra de negócio contratada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 202, message: [ Account does not belong to the customer! ], reasons: [] }]
        '409':
          description: A requisição com os dados enviados já foi realizada e está em processamento.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/physical
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '406':
            statusCode: 406
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/multiple:
    post:
      tags:
        - Criação de cartão
      summary: Cartão físico múltiplo
      description: |
        <div class="bkly-ref-description">
          <p>Crie um cartão físico múltiplo (pré e pós) que será embossado e entrege no endereço informado pelo cliente.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
        [block:callout]
        {
          "type": "warning",
          "title": "Importante",
          "body": "O cartão múltiplo tem como principal característica ter no mesmo plástico um número pré e um pós. Porém, um dos números ficará adormecido enquanto o outro estiver ativo."
        }
        [/block]
      operationId: cardCreateMultipleCard
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCardRequest"
      responses:
        '202':
          description: A solicitação foi aceita e o cartão está sendo criado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
              examples:
                response:
                  value:
                    proxy: "2370021007715002820"
                    activateCode: "A0DDDC0951D1"
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ Card Name must not be empty ], reasons: [] }, { code: conflict, message: [ Alias is not in the correct format ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '406':
          description: Quando a requisição é válida, porém não foi aceita devido a alguma regra de negócio contratada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 202, message: [ Account does not belong to the customer! ], reasons: [] }]
        '409':
          description: A requisição com os dados enviados já foi realizada e está em processamento.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/orders/multiple
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/{proxy}/duplicate:
    post:
      tags:
        - Criação de cartão
      summary: Segunda via de cartão
      description: |
        <div class="bkly-ref-description">
          <p>Crie uma segunda via de um cartão físico com as mesmas características da primeira via.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
        [block:callout]
        {
          "type": "warning",
          "title": "Importante",
          "body": "Quando a segunda via for emitida, a primeira via será cancelada automaticamente."
        }
        [/block]
      operationId: createDuplicateCard
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createDuplicateCardRequest"
      responses:
        '202':
          description: Cartão
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
              examples:
                response:
                  value:
                    proxy: "2370021007715002820"
                    activateCode: "A0DDDC0951D1"
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ Card Name must not be empty ], reasons: [] }, { code: conflict, message: [ Alias is not in the correct format ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '406':
          description: Quando a requisição é válida, porém não foi aceita devido a alguma regra de negócio contratada.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 202, message: [ Account does not belong to the customer! ], reasons: [] }]
        '409':
          description: A requisição com os dados enviados já foi realizada e está em processamento.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
  
  /cards/{proxy}:
    get:
      tags:
        - Consulta de Cartões
      summary: Por proxy
      description: |
        <div class="bkly-ref-description">
          <p>Consulte os dados de um cartão pelo seu proxy.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: GetCardByProxy
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: A solicitação é recebida e retorna o cartão do proxy correspondente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardResponse"
              examples:
                response:
                  value:
                    created: "2020-07-20T22:53:12"
                    companyKey: "Acesso"
                    documentNumber: "00000000000"
                    activateCode: "A9991B2E491D"
                    bankAgency: "0001"
                    bankAccount: "0001"
                    lastFourDigits: "4321"
                    proxy: "22999903520114195"
                    name: Jose da Silva
                    alias: Meu Cartão
                    cardType: Virtual
                    status: InTransitLocked
                    physicalBinds: 
                      [{ proxy: "2300199994444111999", created: "2020-07-20T22:54:03" }]               
                    virtualBind: 
                      proxy: "22999903520114195"
                      created: "2020-07-20T22:55:12"            
                    allowContactless: true
                    address:
                      zipCode: "05402100"
                      address: Avenida Rebouças
                      number: "1368"
                      neighborhood: Pinheiros
                      complement: Em frente a Wizard
                      city: São Paulo
                      state: SP
                      country: Brasil
                    historyStatus:
                      [ { modified: "2020-07-20T22:53:12", value: Building }, { modified: "2020-07-20T22:55:12", value: InTransitLocked } ]
                    activatedAt: null
                    lastUpdatedAt: "2020-07-20T22:55:12"
                    isActivated: false
                    isLocked: true
                    isCanceled: false
                    isBuilding: false
                    isFirtual: true
                    isPre: true
                    isPos: false
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: Cartão não existente.
        '409':
          description: Requisição em conflito com as regras de negócio contratado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/document/{documentNumber}:
     get:
      tags:
        - Consulta de Cartões
      summary: Por documento (CPF ou CNPJ)
      description: |
        <div class="bkly-ref-description">
          <p>Consulte os cartões vinculados ao número de documento (CPF ou CNPJ) do titular.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardGetCardsByDocument
      parameters:
        - name: documentNumber
          in: path
          required: true
          description: Número de documento de CPF ou CNPJ (informe somente os números). Tamanho máximo de 14 caracteres.
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Lista com os cartões pertecentes ao documento.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/cardResponse"
              examples:
                response:
                  value:
                    - created: "2020-07-20T22:53:12"
                      companyKey: "Acesso"
                      documentNumber: "00000000000"
                      activateCode: "A9991B2E491D"
                      bankAgency: "0001"
                      bankAccount: "0001"
                      lastFourDigits: "4321"
                      proxy: "22999903520114195"
                      name: Jose da Silva
                      alias: Meu Cartão
                      cardType: Virtual
                      status: InTransitLocked
                      physicalBinds: 
                        [{ proxy: "2300199994444111999", created: "2020-07-20T22:54:03" }]               
                      virtualBind: 
                        proxy: "22999903520114195"
                        created: "2020-07-20T22:55:12"  
                      allowContactless: true
                      address:
                        zipCode: "05402100"
                        address: Avenida Rebouças
                        number: "1368"
                        neighborhood: Pinheiros
                        complement: Em frente a Wizard
                        city: São Paulo
                        state: SP
                        country: Brasil
                      historyStatus:
                        [ { modified: "2020-07-20T22:53:12", value: Building }, { modified: "2020-07-20T22:55:12", value: InTransitLocked } ]
                      activatedAt: null
                      lastUpdatedAt: "2020-07-20T22:55:12"
                      isActivated: false
                      isLocked: true
                      isCanceled: false
                      isBuilding: false
                      isFirtual: true
                      isPre: true
                      isPos: false
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]
        '404':
          description: Não há cartões criados para o documento fornecido.
        '401':
          description: Sem autorização para realizar a solicitação.
        '409':
          description: Requisição em conflito com as regras de negócio contratado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/document/{document}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.documentNumber: method.request.path.documentNumber
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '204':
            statusCode: 204
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/activateCode/{activationCode}:
    get:
      tags:
        - Consulta de Cartões
      summary: Por código de ativação
      description: |
        <div class="bkly-ref-description">
          <p>Consulte os cartões através do seu código de ativação.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardGetByActivateCode
      parameters:
        - name: activationCode
          in: path
          required: true
          description: Código de ativação do cartão (12 caracteres).
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Lista com os cartões com o código de ativação informado.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/cardResponse"
              examples:
                response:
                  value:
                    - created: "2020-07-20T22:53:12"
                      companyKey: "Acesso"
                      documentNumber: "00000000000"
                      activateCode: "A9991B2E491D"
                      bankAgency: "0001"
                      bankAccount: "0001"
                      lastFourDigits: "4321"
                      proxy: "22999903520114195"
                      name: Jose da Silva
                      alias: Meu Cartão
                      cardType: Virtual
                      status: InTransitLocked
                      physicalBinds: 
                        [{ proxy: "2300199994444111999", created: "2020-07-20T22:54:03" }]               
                      virtualBind: 
                        proxy: "22999903520114195"
                        created: "2020-07-20T22:55:12" 
                      allowContactless: true
                      address:
                        zipCode: "05402100"
                        address: Avenida Rebouças
                        number: "1368"
                        neighborhood: Pinheiros
                        complement: Em frente a Wizard
                        city: São Paulo
                        state: SP
                        country: Brasil
                      historyStatus:
                        [ { modified: "2020-07-20T22:53:12", value: Building }, { modified: "2020-07-20T22:55:12", value: InTransitLocked } ]
                      activatedAt: null
                      lastUpdatedAt: "2020-07-20T22:55:12"
                      isActivated: false
                      isLocked: true
                      isCanceled: false
                      isBuilding: false
                      isFirtual: true
                      isPre: true
                      isPos: false
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]
        '204':
          description: Não há cartões criados para o código de ativação fornecido.
        '401':
          description: Sem autorização para realizar a solicitação.
        '409':
          description: Requisição em conflito com as regras de negócio contratado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/activatecode/{activatecode}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.activateCode: method.request.path.activateCode
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '204':
            statusCode: 204
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/account/{account}:
    get:
      tags:
        - Consulta de Cartões 
      summary: Por conta
      description: |
        <div class="bkly-ref-description">
          <p>Consulte os cartões vinculados a uma conta de pagamentos.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardGetCardsByAccount
      parameters:
        - name: agency
          in: query
          required: false
          description: Número de agência (4 dígitos).
          schema:
            type: string
        - name: account
          in: path
          required: true
          schema:
            type: string
        - name: documentNumber
          in: query
          required: false
          description: Número de documento de CPF ou CNPJ (informe somente os números). Tamanho máximo de 14 caracteres.
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Lista com os cartões pertecentes à conta.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/cardResponse"
              examples:
                response:
                  value:
                    - created: "2020-07-20T22:53:12"
                      companyKey: "Acesso"
                      documentNumber: "00000000000"
                      activateCode: "A9991B2E491D"
                      bankAgency: "0001"
                      bankAccount: "0001"
                      lastFourDigits: "4321"
                      proxy: "22999903520114195"
                      name: Jose da Silva
                      alias: Meu Cartão
                      cardType: Virtual
                      status: InTransitLocked
                      physicalBinds: 
                        [{ proxy: "2300199994444111999", created: "2020-07-20T22:54:03" }]               
                      virtualBind: 
                        proxy: "22999903520114195"
                        created: "2020-07-20T22:55:12" 
                      allowContactless: true
                      address:
                        zipCode: "05402100"
                        address: Avenida Rebouças
                        number: "1368"
                        neighborhood: Pinheiros
                        complement: Em frente a Wizard
                        city: São Paulo
                        state: SP
                        country: Brasil
                      historyStatus:
                        [ { modified: "2020-07-20T22:53:12", value: Building }, { modified: "2020-07-20T22:55:12", value: InTransitLocked } ]
                      activatedAt: null
                      lastUpdatedAt: "2020-07-20T22:55:12"
                      isActivated: false
                      isLocked: true
                      isCanceled: false
                      isBuilding: false
                      isFirtual: true
                      isPre: true
                      isPos: false
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: Não há cartões criados para a conta fornecida.
        '409':
          description: Requisição em conflito com as regras de negócio contratado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/account/{account}?agency={agency}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.agency: method.request.path.agency
          integration.request.path.account: method.request.path.account
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '204':
            statusCode: 204
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/{proxy}/pci:
    post:
      tags:
        - Consulta de Cartões
      summary: Dados de segurança do cartão
      description: |
        <div class="bkly-ref-description">
          <p>Consulte os dados de PCI do cartão (PAN, CVV e data de validade).</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.pci.read</span>
        </div>
      operationId: getDataPci
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
        - name: proxy
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/getDataPciRequest"
      responses:
        '200':
          description: Dados de PCI do cartão.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dataPciResponse"
              examples:
                response:
                  value:
                    cardNumber: "000000000000000"
                    cvv: "000"
                    expirationDate: 05/09
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: length, message: [ Password must be 4 characters in length. You entered 5 characters ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: Cartão não existente.
        '409':
          description: Requisição em conflito com as regras de negócio contratado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 029, message: [ The card is in the process of being created ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/pci
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500  
  
  /cards/{proxy}/password:
    patch:
      tags:
        - Gestão de senha
      summary: Alterar senha
      description: |
        <div class="bkly-ref-description">
          <p>Altere a senha do cartão.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.pci.password.update</span>
        </div>
      operationId: cardChangeCardPassword
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/changeCardPasswordRequest"
      responses:
        '200':
          description: Alteração de senha realizada.
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: length, message: [ Password must be 4 characters in length. You entered 6 characters. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: Se o cartão não exisitir.
        '409':
          description: Requisição em conflito com as regras de negócio contratado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 029, message: [ The card is in the process of being created ], reasons: [] }]
        '500':
          description:  Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/password
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.authorization-token: method.request.header.authorization-token
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500
            
  /cards/{proxy}/activate:
    patch:
      tags:
        - Status do cartão
      summary: Ativação de cartão
      description: |
        <div class="bkly-ref-description">
          <p>Realize a ativação do cartão pela primeira vez.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
      operationId: cardActivateCard
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/activateCardRequest"
      responses:
        '200':
          description: Ativação foi realizada.
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: length, message: [ Password must be 4 characters in length. You entered 5 characters. ], reasons: [] },
                              { code: required, message: [ Activate Code must not be empty. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: Se o cartão não existir.
        '409':
          description: Requisição em conflito com as regras de negócio contratado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/activate
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500
  
  /cards/{proxy}/status:
    patch:
      tags:
        - Status do cartão
      summary: Alteração do status do cartão
      description: |
        <div class="bkly-ref-description">
          <p>O status do cartão poderá ser alterado para temporário ou definitivo.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
      operationId: cardChangeCardStatus
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/changeCardStatusRequest"
      responses:
        '200':
          description: O status foi alterado com sucesso.
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: conflict, message: [ Error converting value Cancel to type Core.Card.Domain.Shared.Types.CardStatus. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: Se o cartão não exisitir.
        '409':
          description: Requisição em conflito com as regras de negócio contratado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/status
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500 
            
  /cards/{proxy}/contactless:
    patch:
      tags:
        - Status do cartão
      summary: Configuração do contactless
      description: |
        <div class="bkly-ref-description">
          <p>Ative ou desative a função contactless do cartão. Para cartões virtuais, caso o contactless fique desativado, não será possível realizar transações com o uso de carteiras digitais.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
      operationId: cardContactLess
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - name: allowContactless
          in: query
          schema:
            type: boolean
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Alteração realizada com sucesso.
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: conflict, message: [ The value ok is not valid. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: Se o cartão não existir.
        '409':
          description: Requisição em conflito com as regras de negócio contratado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/contactless?allowContactless={allowContactless}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.query.allowContactless: method.request.path.allowContactless
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500 
  
  /cards/{proxy}/nextStatus:
    get:
      tags:
        - Status do cartão
      summary: Consulta dos próximos status
      description: |
        <div class="bkly-ref-description">
          <p>Consulte todos os possíveis próximos status válidos para o cartão. Serão consideradas as permissões concedidas para o token informado na requisição.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardGetLots
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação recebida. O retorno traz os dados dos lotes.
        '204':
          description: Não foram encontrados lotes.              
        '400':
          description: "Existem erros no preenchimento da requisição."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '204':
            statusCode: 204      
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '500':
            statusCode: 500  
            
  /cards/{proxy}/transactions:
    get:
      tags:
        - Consulta de transações
      summary: Consulta de transações por cartão
      description: |
        <div class="bkly-ref-description">
          <p>Consulte as transações realizadas no cartão de acordo com os filtros informados. <br /> <b>Importante!</b> A diferença entre a data de início e de fim deverá ser de, no máximo, sete dias.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardTransactionsByCard
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: string
        - name: pageSize
          in: query
          description: O valor máximo permitido é de 100.
          required: false
          schema:
            type: integer
        - name: startDate
          in: query
          required: true
          schema:
            type: string
        - name: endDate
          in: query
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Lista as transações pertencentes ao cartão, além das propriedades referentes à paginação da consulta.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/resultTransactionResponse"
              examples:
                response:
                  value:
                    - nextPage: "mkzjfhcnnhat84y583hguim49801"
                      hasLastPage: true
                      transactions: 
                        [
                          {
                            account: {
                              number: "000231",
                              agency: "0001"
                            },
                            amount: {
                              value: 138.54,
                              local: 138.54,
                              net: 138.54,
                              iof: 0,
                              markup: 0
                            },
                            merchant: {
                              id: "207001540000011",
                              name: "EC*MERCADOLIVRE",
                              mcc: "0101",
                              city: "SAO PAULO"
                            },  
                            authorizationCode: "823912",
                            countryCode: "BR",
                            currencyCode: "986",
                            entryMode: "Chip",
                            status: "TransactionHoldWasExpired",
                            transactionTimestamp: "2020-09-24T17:21:39.8921566+00:00",
                            transactionType: "Purchase"
                          }
                        ]
        '204':
          description: Não há transações para o cartão fornecido.
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/transactions?startDate={startDate}&endDate={endDate}&pageSize={pageSize}&page={page}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.query.startDate: method.request.query.startDate
          integration.request.query.endDate: method.request.query.endDate
          integration.request.query.page: method.request.query.page
          integration.request.query.pageSize: method.request.query.pageSize
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '204':
            statusCode: 204
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '500':
            statusCode: 500

  /cards/{proxy}/tracking:
    get:
      tags:
        - Rastreio de Cartões
      summary: Por proxy
      description: |
        <div class="bkly-ref-description">
          <p>Obtenha o rastreio do cartão pelo seu proxy.</p> 
          <span class="bkly-ref-small-beta-tag">beta</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: trackingGetByProxy
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação recebida. O retorno é o rastreio do cartão do proxy correspondente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/trackingResponse"
              examples:
                response:
                  value:
                    createdDate: "2020-07-20T22:53:12"
                    externalTracking:
                      code: "A2327692D592"
                      partner: "CORREIOS"
                    name: Jose da Silva
                    alias: Meu Cartão
                    address:
                      [ { zipCode: "05402100", address: Avenida Rebouças, number: "1368", neighborhood: Pinheiros, complement: Em frente a Wizard, city: São Paulo, state: SP, country: Brasil } ]
                    status:
                      [ { createdDate: "2020-07-20T22:53:12", type: Created, reason: Created  }, { createdDate: "2020-07-20T22:55:12", type: InProgress, reason: In route to delivery } ]
                    finalized:
                      [ { createdDate: "2020-07-20T22:53:12", recipientName: "Maria da Silva", recipientKinship: "Mãe", documentNumber: "1234567", attempts: 1 }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          description: Rastreio de cartão não existente.
        '500':
          description: Ocorrência de erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/trackingErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/tracking
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            $ref: 'http://localhost:3320/commons/components#/components/responses/404'
          '500':
            $ref: 'http://localhost:3320/commons/components#/components/responses/500'
  
  /cards/{proxy}/tracking/address:
    post:
      tags:
        - Rastreio de Cartões
      summary: Atualização de endereço
      description: |
        <div class="bkly-ref-description">
          <p>Atualize o endereço do destinatário para uma nova tentativa de entrega.</p>
          <span class="bkly-ref-small-beta-tag">beta</span>
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
      operationId: trackingUpdateAddress
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateTrackingAddressRequest"
      responses:
        '201':
          description: Endereço cadastrado com sucesso.
        '400':
          description: Não é possível alterar o endereço, pois o seu cartão não está em custódia.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardErrorResponse"
              examples:
                response:
                  value:
                    reference: https://bankly.readme.io/reference
                    errors: [{ code: required, message: [ Address must not be empty ], reasons: [] }, { code: conflict, message: [ Tracking Status not allowed to update address ], reasons: [] }]
        '401':
          description: Sem autorização para realizar a solicitação.
        '404':
          $ref: 'http://localhost:3320/commons/components#/components/responses/404'   
        '500':
          $ref: 'http://localhost:3320/commons/components#/components/responses/500'   

      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/tracking
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '201':
            statusCode: 201
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '500':
            statusCode: 500

  /cards-pci/{proxy}/wallet/{wallet}/brand/{brand}:
    post:
      tags:
        - Wallets
      summary: Geração de token
      description: |
        <div class="bkly-ref-description">
            <p>Gere um token com os dados criptografados do cartão para adição do cartão junto a uma carteira digital.</p>
            <span class="bkly-ref-small-beta-tag">beta</span> 
            <span class="bkly-ref-scope-tag">scope: card.pci.token.create</span>
          </div>
      
      operationId: GenerateTokenizationForWallet
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - name: wallet
          in: path
          required: true
          schema:
            type: string
            $ref: "#/components/schemas/walletTypes"
        - name: brand
          in: path
          required: true
          schema:
            type: string
            $ref: "#/components/schemas/brandTypes"
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Resultado da geração do token.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/cardTokenizationResponse"
              examples:
                response:
                  value:
                    - data: "mkzjfhcnnhat84y583hguim49801mkzjfhcnnhat84y583hguim49801mkzjfhcnnhat84y583hguim49801mkzjfhcnnhat84y583hguim49801mkzjfhcnnhat84y583hguim49801mkzjfhcnnhat84y583hguim49801"
                      lastFourDigits: "1534"
                      phoneNumber: "11999999999"
                      address:
                        zipCode: "05402100"
                        address: Avenida Rebouças
                        number: "1368"
                        neighborhood: Pinheiros
                        complement: Em frente a Wizard
                        city: São Paulo
                        state: SP
                        country: Brasil
        '400':
          $ref: 'http://localhost:3320/commons/components#/components/responses/400'
        '401':
          $ref: 'http://localhost:3320/commons/components#/components/responses/401'
        '409':
          $ref: 'http://localhost:3320/commons/components#/components/responses/409'
        '500':
          $ref: 'http://localhost:3320/commons/components#/components/responses/500'
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards-pci/{proxy}/wallet/{wallet}/brand/{brand}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.path.wallet: method.request.path.wallet
          integration.request.path.brand: method.request.path.brand
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/credits/customers:
    post:
      tags:
        - Análise de crédito 
      summary: Criação de análise de crédito
      description: |
        <div class="bkly-ref-description">
          <p>Antes de emitir um cartão de crédito, solicite uma análise de crédito para seu cliente.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> <span class="bkly-ref-scope-tag">scope: credit.write</span>
        </div>
      operationId: creditAnalysisCreate
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCustomerRequest"
      responses:
        "202":
          description: A solicitação foi aceita e a análise de crédito foi concluída.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createCustomerResponse"
              examples:
                response:
                  value:
                    companyKey: "ACESSO"
                    document: "12345678900"
                    contract: "000010"
        '401':
          $ref: 'http://localhost:3320/commons/components#/components/responses/401'
        '500':
          $ref: 'http://localhost:3320/commons/components#/components/responses/500'

  /cards/credits/terms-and-conditions/acceptance:
    post:
      tags:
        - Análise de crédito 
      summary: Aceite da proposta do contrato de crédito
      description: |
        <div class="bkly-ref-description">
          <p>Envie o aceite da proposta já aprovada de um contrato de crédito.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> <span class="bkly-ref-scope-tag">scope: credit.write</span>
        </div>
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/acceptanceContractRequest"
      responses:
        '202':
          description: O contrato de crédito foi aceito.
        '401':
          $ref: 'http://localhost:3320/commons/components#/components/responses/401'
        '500':
          $ref: 'http://localhost:3320/commons/components#/components/responses/500'

  /cards/credits/document/{documentNumber}/contracts/{contract}:
    get:
      tags:
        - Análise de crédito
      summary: Consulta de contrato de crédito 
      description: |
        <div class="bkly-ref-description">
          <p>Consulte um contrato de crédito já existente.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> <span class="bkly-ref-scope-tag">scope: credit.read</span>
        </div>
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
        - name: documentNumber
          in: path
          required: true
          description: Número de documento do cliente (CPF ou CNPJ).
          schema:
            type: string
        - name: contract
          in: path
          description: Número do contrato de crédito do cliente.
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Retorno com informações do contrato de crédito especificado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getContractCreditResponse"
        '401':
          $ref: 'http://localhost:3320/commons/components#/components/responses/401'
        '500':
          $ref: 'http://localhost:3320/commons/components#/components/responses/500'


  /cards/invoices/document/{documentNumber}/proxy/{proxy}/open:
    get:
      tags:
        - Gestão de faturas
      summary: Consulta de fatura aberta NÃO PODE VIR MAIS DE UMA FATURA N?
      description: |
        <div class="bkly-ref-description">
          <p>Consulte uma fatura aberta.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> <span class="bkly-ref-scope-tag">scope: credit.read</span>
        </div>
      parameters:
        - $ref: "#/components/parameters/DocumentNumber"
        - $ref: "#/components/parameters/Proxy"
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação aceita com sucesso.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/InvoiceDto"
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceDto"
            text/json:
              schema:
                $ref: "#/components/schemas/InvoiceDto"
        '400':
          description: Existem erros no preenchimento da requisição.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
            text/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Recurso não encontrado.
          content: 
            text/plain:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
            application/json:
              schema: 
                $ref: "#/components/schemas/ProblemDetails"
            text/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"

  /cards/invoices/{statementId}:
    get:
      tags:
      - Gestão de faturas
      summary: Consulta por ID da fatura
      description: |
        <div class="bkly-ref-description">
          <p>Consulte uma fatura específica por meio do seu ID. </p> 
          <span class="bkly-ref-small-stable-tag">stable</span> <span class="bkly-ref-scope-tag">scope: credit.read</span>
        </div>
      parameters:
      - $ref: "#/components/parameters/StatementId"
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação aceita com sucesso.
          content: {text/plain: {schema: {$ref: "#/components/schemas/InvoiceDto"}}, application/json: {schema: {$ref: "#/components/schemas/InvoiceDto"}}, text/json: {schema: {$ref: "#/components/schemas/InvoiceDto"}}}
        '400':
          description: Existem erros no preenchimento da requisição.
          content: {text/plain: {schema: {$ref: "#/components/schemas/Error"}}, application/json: {schema: {$ref: "#/components/schemas/Error"}}, text/json: {schema: {$ref: "#/components/schemas/Error"}}}
        '404':
          description: Recurso não encontrado.
          content: {text/plain: {schema: {$ref: "#/components/schemas/ProblemDetails"}}, application/json: {schema: {$ref: "#/components/schemas/ProblemDetails"}}, text/json: {schema: {$ref: "#/components/schemas/ProblemDetails"}}}

  /cards/invoices/document/{documentNumber}/proxy/{proxy}:
    get:
      tags:
      - Gestão de faturas
      summary: Consulta de faturas 
      description: |
        <div class="bkly-ref-description">
          <p>Consulte as faturas de um cartão.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> <span class="bkly-ref-scope-tag">scope: </span>
        </div>
      parameters:
      - $ref: "#/components/parameters/DocumentNumber"
      - $ref: "#/components/parameters/Proxy"
      - name: initialDate
        in: query
        required: true
        schema: {type: string, description: Data inicial para a consulta, format: date-time}
      - name: finalDate
        in: query
        required: true
        schema: {type: string, description: Data final para a consulta, format: date-time}
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação aceita com sucesso.
          content: {text/plain: {schema: {$ref: "#/components/schemas/PreviousResumeInvoicesDto"}}, application/json: {schema: {$ref: "#/components/schemas/PreviousResumeInvoicesDto"}}, text/json: {schema: {$ref: "#/components/schemas/PreviousResumeInvoicesDto"}}}
        '204':
          description: Nenhuma fatura encontrada.
        '400':
          description: Existem erros no preenchimento da requisição.
          content: {text/plain: {schema: {$ref: "#/components/schemas/Error"}}, application/json: {schema: {$ref: "#/components/schemas/Error"}}, text/json: {schema: {$ref: "#/components/schemas/Error"}}}

  /cards/invoices/document/{documentNumber}/proxy/{proxy}/limits:
    get:
      tags:
      - Gestão de faturas
      summary: Consulta do limite de crédito
      description: |
        <div class="bkly-ref-description">
          <p>Consulte o limite de crédito do cartão (OQUE ISSO TEM A A VER COM FATURA?).</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> <span class="bkly-ref-scope-tag">scope: credit.read</span>
        </div>
      parameters:
      - $ref: "#/components/parameters/DocumentNumber"
      - $ref: "#/components/parameters/Proxy"
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação aceita com sucesso.
          content: {text/plain: {schema: {$ref: "#/components/schemas/CreditLimitDto"}}, application/json: {schema: {$ref: "#/components/schemas/CreditLimitDto"}}, text/json: {schema: {$ref: "#/components/schemas/CreditLimitDto"}}}
        '400':
          description: Existem erros no preenchimento da requisição.
          content: {text/plain: {schema: {$ref: "#/components/schemas/Error"}}, application/json: {schema: {$ref: "#/components/schemas/Error"}}, text/json: {schema: {$ref: "#/components/schemas/Error"}}}
        '404':
          description: Recurso não encontrado.
          content: {text/plain: {schema: {$ref: "#/components/schemas/ProblemDetails"}}, application/json: {schema: {$ref: "#/components/schemas/ProblemDetails"}}, text/json: {schema: {$ref: "#/components/schemas/ProblemDetails"}}}
      
  /cards/invoices/{statementId}/payment:
    post:
      tags:
        - Gestão de faturas
      summary: Geração de um pagamento
      description: |
        <div class="bkly-ref-description">
          <p>Gere o pagamento de uma fatura.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> <span class="bkly-ref-scope-tag">scope: credit.read</span>
        </div>
      parameters:
        - $ref: "#/components/parameters/StatementId"
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        content:
          application/json-patch+json: {schema: {$ref: "#/components/schemas/CreatePaymentCommand"}}
          application/json: {schema: {$ref: "#/components/schemas/CreatePaymentCommand"}}
          text/json: {schema: {$ref: "#/components/schemas/CreatePaymentCommand"}}
          application/+json: {schema: {$ref: "#/components/schemas/CreatePaymentCommand"}}
      responses:
        '202':
          description: Solicitação aceita com sucesso.
          content: {text/plain: {schema: {$ref: "#/components/schemas/PaymentStatusDto"}}, application/json: {schema: {$ref: "#/components/schemas/PaymentStatusDto"}}, text/json: {schema: {$ref: "#/components/schemas/PaymentStatusDto"}}}
        '400':
          description: Existem erros no preenchimento da requisição.
          content: {text/plain: {schema: {$ref: "#/components/schemas/Error"}}, application/json: {schema: {$ref: "#/components/schemas/Error"}}, text/json: {schema: {$ref: "#/components/schemas/Error"}}}
        '406':
          description: 'Not Acceptable'
          content: {text/plain: {schema: {$ref: "#/components/schemas/ProblemDetails"}}, application/json: {schema: {$ref: "#/components/schemas/ProblemDetails"}}, text/json: {schema: {$ref: "#/components/schemas/ProblemDetails"}}}

  /cards/invoices/{statementId}/payment-options:
    get:
      tags:
      - Faturas de cartão
      summary: Consulta das opções de pagamento
      description: |
        <div class="bkly-ref-description">
          <p>Consulte as opções de pagamento.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> <span class="bkly-ref-scope-tag">scope: credit.read</span>
        </div>
      parameters:
      - $ref: "#/components/parameters/StatementId"
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/authorization"
      responses:
        '202':
          description: Solicitação aceita com sucesso.
          content: {text/plain: {schema: {type: array, items: {$ref: "#/components/schemas/PaymentOptionsDto"}}}, application/json: {schema: {type: array, items: {$ref: "#/components/schemas/PaymentOptionsDto"}}}, text/json: {schema: {type: array, items: {$ref: "#/components/schemas/PaymentOptionsDto"}}}}
        '400':
          description: Existem erros no preenchimento da requisição.
          content: {text/plain: {schema: {$ref: "#/components/schemas/Error"}}, application/json: {schema: {$ref: "#/components/schemas/Error"}}, text/json: {schema: {$ref: "#/components/schemas/Error"}}}
        '406':
          description: 'Not Acceptable'
          content: {text/plain: {schema: {$ref: "#/components/schemas/ProblemDetails"}}, application/json: {schema: {$ref: "#/components/schemas/ProblemDetails"}}, text/json: {schema: {$ref: "#/components/schemas/ProblemDetails"}}}


description: VERIFICAR SE ESSE ENDPOINT VAI FICAR

  /cards/invoices/{statementId}/installments:
    post:
      tags:
      - Faturas de cartão
      parameters:
      - $ref: "#/components/parameters/StatementId"
      - $ref: "#/components/parameters/apiVersion"
      - $ref: "#/components/parameters/authorization"
      requestBody:
        content:
          application/json-patch+json: {schema: {$ref: "#/components/schemas/CreateSimulationOfInstallmentsCommand"}}
          application/json: {schema: {$ref: "#/components/schemas/CreateSimulationOfInstallmentsCommand"}}
          text/json: {schema: {$ref: "#/components/schemas/CreateSimulationOfInstallmentsCommand"}}
          application/+json: {schema: {$ref: "#/components/schemas/CreateSimulationOfInstallmentsCommand"}}
      responses:
        '202':
          description: Solicitação aceita com sucesso.
          content: {text/plain: {schema: {type: array, items: {$ref: "#/components/schemas/PaymentOptionsInstallmentsDto"}}}, application/json: {schema: {type: array, items: {$ref: "#/components/schemas/PaymentOptionsInstallmentsDto"}}}, text/json: {schema: {type: array, items: {$ref: "#/components/schemas/PaymentOptionsInstallmentsDto"}}}}
        '400':
          description: Existem erros no preenchimento da requisição.
          content: {text/plain: {schema: {$ref: "#/components/schemas/Error"}}, application/json: {schema: {$ref: "#/components/schemas/Error"}}, text/json: {schema: {$ref: "#/components/schemas/Error"}}}
        '406':
          description: 'Not Acceptable'
          content: {text/plain: {schema: {$ref: "#/components/schemas/ProblemDetails"}}, application/json: {schema: {$ref: "#/components/schemas/ProblemDetails"}}, text/json: {schema: {$ref: "#/components/schemas/ProblemDetails"}}}


security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    apiVersion:
      name: api-version
      in: header
      required: true
      schema:
        type: string
        
    authorization:
      name: Authorization
      in: header
      required: true
      schema:
        type: string 

    DocumentNumber:
      name: documentNumber
      in: path
      required: true
      schema:
        type: string
        nullable: true

    StatementId:
      name: statementId
      in: path
      required: true
      schema:
        type: integer
        format: int32

    Proxy:
      name: proxy
      in: path
      required: true
      schema:
        type: string
        nullable: true

  schemas:
    createCardsInLotRequest:
      type: object
      properties:
        programId:
          type: integer
          description: Identificador do programa que será vinculado ao cartão.
        quantityCards:
          type: integer
          description: Quantidade de cartões em lote (informar um valor acima de 0 e menor que 2000).
        paymentDay:
          type: integer
          description: Dia de pagamento do cartão.
        address:
          type: object
          description: Informações sobre o endereço de entrega.
          properties:
            zipCode:
              type: string
              description: CEP (informar somente os números).
            address:
              type: string
              description: Logradouro.
            number:
              type: string
              description: Número.
            neighborhood:
              type: string
              description: Bairro.
            complement:
              type: string
              description: Complemento.
            city:
              type: string
              description: Cidade.
            state:
              type: string
              description: Estado (informar a UF).
            country:
              type: string
              description: País.
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
      required:
        - programId
        - quantityCards
        - address
    
    createCardInLotResponse:
      type: object
      properties:
        lotId:
          type: string
          description: Id do lote.

    cardLotsResponse:
      type: object
      properties:
        lotId:
          type: string
          description: Id do lote.
        quantityOrder:
          type: integer
          description: Quantidade de cartões solicitados.    
        dateOrder:
          type: string
          description: Data da solicitação de criação do lote.
        programId:
          type: integer
          description: Identificador do programa vinculado ao cartão.

    cardLotResponse:
      type: object
      properties:
        lotId:
          type: string
          description: Id do lote.
        quantityOrder:
          type: integer
          description: Quantidade de cartões solicitados.    
        dateOrder:
          type: string
          description: Data da solicitação de criação do lote.
        programId:
          type: integer
          description: Identificador do programa vinculado ao cartão.
        cards: 
          type: array
          description: Proxy dos cartões.
        address:
          type: object
          description: Informações sobre o endereço de entrega.
          properties:
            zipCode:
              type: string
              description: CEP.
            address:
              type: string
              description: Logradouro.
            number:
              type: string
              description: Número.
            neighborhood:
              type: string
              description: Bairro.
            complement:
              type: string
              description: Complemento.
            city:
              type: string
              description: Cidade.
            state:
              type: string
              description: Estado (formato UF).
            country:
              type: string
              description: País.
    
    bindNoNameRequest:
      type: object
      properties:
        password:
          type: string
          description: Senha que será utilizada nas compras (4 dígitos).
        bankAgency:
          type: string
          description: Número da agência (4 dígitos).
        bankAccount:
          type: string
          description: Número da conta ao qual o cartão será vinculado.
        alias:
          type: string
          description: Apelido do cartão (não é permitido o uso de caracteres especiais e o tamanho máximo é de 16 caracteres). 
        documentNumber:
          type: string
          description: Número de documento de CPF ou CNPJ (informar somente os números e o tamanho máximo é de 14 caracteres).   
      required:
        - documentNumber
        - password
        - bankAccount
        - bankAgency
    
    
    academicDegree:
      type: string
      description: Grau de instrução do cliente.
      enum:
        - HighSchool
        - Graduated
        - PostGraduate
        - Masters
        - Doctorate
   
    acceptanceContractRequest:
      type: object
      properties:
        documentNumber:
          type: string
          description: Número de documento (CPF ou CNPJ). Informe somente números.
        contract:
          type: string
          description: Número do contrato de crédito.
        dataHash:
          type: string
          description: Termos e condições aceitos pelo cliente.
      required:
        - documentNumber
        - contract
        - dataHash
    
    acceptanceTerm:
      type: object
      properties:
        signedAt:
          type: string
          description: Data e hora em que o contrato de crédito foi aceito/assinado.
        creditDetails:
          type: object
          properties:
            diaryIof:
              type: number
            fixedIof:
              type: number
            internationalIof:
              type: number
            daysAdvanceCut:
              type: integer
            futureCalendarMonths:
              type: integer
            daysAccountLockDelay:
              type: integer
            accrualStop:
              type: integer
            delayInvoiceRate:
              type: number
            rotatingRate:
              type: number
            minimumValueOfRefinanceInstallment:
              type: number
            invoiceRefinanceRate:
              type: number
            maximumNumberInstallmentsRefinance:
              type: integer
            annualValue:
              type: number
            annuityInstallments:
              type: integer
            iofFirstDay:
              type: boolean
            minimumAmountInstallmentAgreementInvoice:
              type: number
            minimumEntryInvoiceAgreement:
              type: number
            maximumEntryInvoiceAgreement:
              type: number
            minimumPercentageInvoiceAgreement:
              type: number
            maximumEntryAgreementInvoicePercentage:
              type: number
            deadlineInDaysForNewAnalysisRequest:
              type: integer
            deadlineInDaysForExpirationOfAnalysis:
              type: integer
        dataHash:
          type: string
          description: Termos e condições aceitos pelo cliente.
    
    activateCardRequest:
      type: object
      properties:
        activateCode:
          type: string
          description: Código de ativação do cartão (12 caracteres).
        password:
          type: string
          description: Senha de uso do cartão (4 dígitos).
      required:
        - activateCode
        - password
    
    address:
      type: object
      description: Endereço do cliente.
      properties:
        zipCode:
          type: string
          description: CEP de endereço.
        addressLine:
          type: string
        buildingNumber:
          type: string
          description: Número do endereço.
        complement:
          type: string
          description: Complemento do endereço.
        neighborhood:
          type: string
          description: Bairro do endereço.
        city:
          type: string
          description: Cidade do endereço.
        state:
          type: string
          description: Estado do endereço.
        country:
          type: string
          description: País do endereço.
    
    brandTypes:
      type: string
      enum:
        - Mastercard
      
    cardBuildingResponse:
      type: object
      properties:
        proxy:
          type: string
          description: Proxy do cartão criado.
        activateCode:
          type: string
          description: Código para ativar o cartão.
              
    cardErrorResponse:
      type: object
      properties:
        reference:
          type: string
          description: Link para documentação de integração.
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                description: Código de erro.
              message:
                type: string
                description: Mensagem explicativa do erro.
    
    cardResponse:
      type: object
      properties:
        created:
          type: string
          description: Proxy do cartão criado (formato 'yyyy-MM-ddTHH:mm:ss').
        companyKey:
          type: string
          description: Identificador da companhia.
        documentNumber:
          type: string
          description: Documento do cliente (CPF/CNPJ).
        activateCode:
          type: string
          description: Código de ativação do cartão.
        bankAgency:
          type: string
          description: Agência do cliente.
        bankAccount:
          type: string
          description: Conta do cliente.
        lastFourDigits:
          type: string
          description: Últimos 04 dígitos do cartão.
        proxy:
          type: string
          description: Identificador do cartão.
        name:
          type: string
          description: Nome impresso no cartão.
        alias:
          type: string
          description: Apelido impresso no cartão.
        cardType:
          type: string
          $ref: "#/components/schemas/cardTypes"
          description: Tipo do cartão.
        physicalBinds: 
          type: array
          description: Dados do cartão físico.
          items:
            type: object
            properties:
              proxy: 
                type: string
                description: Identificador do cartão físico.
              created: 
                type: string
                description: Data do cartão criado (formato 'yyyy-MM-ddTHH:mm:ss').
        virtualBind: 
          type: object
          properties:
            proxy: 
              type: string
              description: Identificador do cartão virtual.
            created: 
              type: string
              description: Data do cartão criado (formato 'yyyy-MM-ddTHH:mm:ss').
        status:
          type: string
          $ref: "#/components/schemas/cardStatus"
          description: Status atual do cartão.
        allowContactless:
          type: boolean
          description: Informa status da função contactless.
        address:
          type: object
          properties:
            zipCode:
              type: string
              description: CEP.
            address:
              type: string
              description: Logradouro.
            number:
              type: string
              description: Número.
            neighborhood:
              type: string
              description: Bairro.
            complement:
              type: string
              description: Complemento.
            city:
              type: string
              description: Cidade.
            state:
              type: string
              description: Estado (formato UF).
            country:
              type: string
              description: País.
        historyStatus:
          type: array
          description: Histórico de status.
          items:
            type: object
            properties:
              modified:
                type: string
                description: Data em que o status foi aplicado (formato 'yyyy-MM-ddTHH:mm:ss').
              value:
                type: string
                $ref: "#/components/schemas/cardStatus"
                description: Status aplicado.
        activatedAt:
          type: string
          description: Data da ativação do cartão (formato 'yyyy-MM-ddTHH:mm:ss').
        lastUpdatedAt:
          type: string
          description: Data da última atualização do cartão (formato 'yyyy-MM-ddTHH:mm:ss').
        isActivated:
          type: boolean
          description: Informa se está ativo.
        isLocked:
          type: boolean
          description: Informa se está bloqueado.
        isCanceled:
          type: boolean
          description: Informa se está cancelado.
        isBuilding:
          type: boolean
          description: Informa se o cartão está sendo em construção.
        isFirtual:
          type: boolean
          description: Informa se é um cartão firtual.
        isPre:
          type: boolean
          description: Informa se é um cartão pré-pago.
        isPos:
          type: boolean
          description: Informa se é um cartão pós-pago.
  
    cardStatus:
      type: string
      enum:
        - Building      
        - Undefined
        - Active
        - UpdateRegisterLocked
        - UpdateRegisterCanceled
        - RegisterFraudLocked
        - RegisterFraudCanceled
        - CanceledByCustomer 
        - CanceledByEmitter
        - ReturnedLocked
        - Sleeping
        - InTransitLocked
        - ExpiredCanceled
        - StrayedCanceled
        - Inactive
        - DeathCanceled
        - LockedByPendingPayment 
        - LostOrTheftCanceled
        - WithoutMovementLocked
        - TemporarilyUserLocked
        - WrongPasswordAttemptLocked
        - UseFraudLocked
        - UseFraudCanceled
        - CardCanceledByAccount
    
    cardTokenizationResponse:
      type: object
      properties:
        data:
          type: string
          description: Token gerado.
        lastFourDigits:
          type: string
          description: Últimos quatro dígitos do cartão.
        phoneNumber:
          type: string
          description: Número de contato do cliente.
        address:
          type: object
          properties:
            zipCode:
              type: string
              description: CEP do endereço.
        
    cardTypes:
      type: string
      enum:
        - Physical
        - Virtual
    
    changeCardPasswordRequest:
      type: object
      properties:
        password:
          type: string
          description: Senha de uso do cartão (4 dígitos).
      required:
        - password
    
    changeCardStatusRequest:
      type: object
      properties:
        status:
          type: string
          $ref: "#/components/schemas/cardStatus"
          description: Status para o qual o cartão será modificado.
        password:
          type: string
          description: Senha de uso do cartão (4 dígitos).
        updateCardBinded:
          type: boolean
          description: Atualizar cartões vinculados.
      required:
        - status
        - password
        - updateCardBinded
   
    createCardRequest:
      type: object
      properties:
        documentNumber:
          type: string
          description: Número de documento de CPF ou CNPJ (informe somente os números). Tamanho máximo de 14 caracteres.
        cardName:
          type: string
          description: Nome que será impresso no cartão (não será permitido o uso de números e caracteres especiais). Tamanho máximo de 19 caracteres.
        alias:
          type: string
          description: Apelido do cartão (não será permitido o uso de caracteres especiais e o tamanho máximo é de 16 caracteres).
        bankAgency:
          type: string
          description: Número de agência (4 dígitos).
        bankAccount:
          type: string
          description: Número de conta que o cartão será vinculado.
        programId:
          type: integer
          description: Identificador do programa que será vinculado ao cartão.
        password:
          type: string
          description: "Senha do cartão para realizar transações (preencha com quatro números. Exemplo: '9348')."
        address:
          type: object
          description: Informações sobre endereço (se não for informado, será utilizado o endereço de cadastro do cliente).
          properties:
            zipCode:
              type: string
              description: CEP (informar somente os números).
            address:
              type: string
              description: Logradouro.
            number:
              type: string
              description: Número.
            neighborhood:
              type: string
              description: Bairro.
            complement:
              type: string
              description: Complemento.
            city:
              type: string
              description: Cidade.
            state:
              type: string
              description: Estado (informar a UF).
            country:
              type: string
              description: País.
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
      required:
        - documentNumber
        - cardName
        - alias
        - bankAgency
        - bankAccount
        - password
        - programId
    
    createCustomerRequest:
      type: object
      properties:
        name:
          type: string
          description: Nome do cliente.
        socialName:
          type: string
          description: Nome pelo qual a pessoa gostaria de ser chamada. Saiba mais consultando a [Cartilha do nome social](https://www.mds.gov.br/webarquivos/publicacao/assistencia_social/Folders/cartilha_nome_social.pdf).
        motherName:
          type: string
          description: Nome da mãe do cliente.
        birthDate:
          type: string
          description: Data de nascimento do cliente.
        programId:
          type: string
          description: Identificador do programa que será vinculado ao cartão.
        documentNumber:
          type: string
          description: Número de documento (CPF ou CNPJ). Informe somente números. 
        profession:
          type: string
          description: Profissão do cliente.
        maritalStatus:
          $ref: "#/components/schemas/maritalStatus"
        academicDegree:
          $ref: "#/components/schemas/academicDegree"
        incomeBracket:
          $ref: "#/components/schemas/incomeBracket"
        sex:
          $ref: "#/components/schemas/sex"
        email:
          type: string
          description: E-mail do cliente.
        phone:
          type: object
          description: Número de telefone do cliente.
          properties:
            type:
              $ref: "#/components/schemas/phoneType"
            value:
              type: string
              description: Número do telefone do cliente.
            countryCode:
              type: string
              description: Código DDI do país.
          required:
            - type
            - value
            - countryCode
        address:
          $ref: "#/components/schemas/address"
      required:
        - programId
        - documentNumber
        - profession
        - maritalStatus
        - academicDegree
        - incomeBracket
        - sex
        - email
        - phone
        - address
    
    createCustomerResponse:
      type: object
      properties:
        companyKey:
          type: string
          description: Chave que identifica o parceiro dentro do Bankly.
        document:
          type: string
          description: Número de documento do cliente (CPF ou CNPJ).
        contract:
          type: string
          description: Número do contrato de crédito.
  
    createDuplicateCardRequest:
      type: object
      properties:
        status:
          type: string
          $ref: "#/components/schemas/duplicateCardStatus"
          description: Motivo da segunda via.
        documentNumber:
          type: string
          description: Número de documento de CPF ou CNPJ (informe somente os números).
        description:
          type: string
          description: Detalhes do cancelamento com qualquer informação considerada como relevante.
        password:
          type: string
          description: "Senha do cartão atual (primeira via) para realizar transações (preencha com quatro campos números. Exemplo: '9348')."
        address:
          type: object
          description: Informações sobre endereço (se não for informado será utilizado o endereço de cadastro do cliente).
          properties:
            zipCode:
              type: string
              description: CEP (informar somente os números).
            address:
              type: string
              description: Logradouro.
            number:
              type: string
              description: Número.
            neighborhood:
              type: string
              description: Bairro.
            complement:
              type: string
              description: Complemento.
            city:
              type: string
              description: Cidade.
            state:
              type: string
              description: Estado (informar a UF).
            country:
              type: string
              description: País.
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
      required:
        - status
        - documentNumber
        - password

    creditErrorResponse:
      type: object
      properties:
        reference:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              reasons:
                type: string
    
    dataPciResponse:
      type: object
      properties:
        cardNumber:
          type: string
          description: Numeração do cartão.
        cvv:
          type: string
          description: Código de segurança do cartão.
        expirationDate:
          type: string
          description: Data de expiração do cartão (formato 'MM/yy').
    
    duplicateCardStatus:
      type: string
      enum:
        - LostMyCard
        - CardWasStolen
        - CardWasDamaged
        - CardNotDelivered
        - UnrecognizedOnlinePurchase
    
    entryModeTypes:
      type: string
      enum:
        - Unknown
        - Manual
        - MagneticStripe
        - BarCodeReader
        - OCR
        - Chip
        - ContactlessObsolete
        - ContactlessMChip
        - ContactlessMChipObsolete
        - EletronicCommerce
        - CredentialOnFile
        - HybridTerminalFailedConnection
        - ChipCapableTerminal
        - EletronicCommerceSecureWithUCAF
        - Server
        - MagneticStripeFullTrackData
        - ContactlessMagneticStripe
        - ContactlessInput
        - Visa
        
    getContractCreditResponse:
      type: object
      properties:
        name:
          type: string
          description: Nome do cliente.
        socialName:
          type: string
          description: Nome pelo qual a pessoa gostaria de ser chamada. Saiba mais consultando a [Cartilha do nome social](https://www.mds.gov.br/webarquivos/publicacao/assistencia_social/Folders/cartilha_nome_social.pdf).
        motherName:
          type: string
          description: Nome da mãe do cliente.
        birthDate:
          type: string
          description: Data de nascimento do cliente.
        programId:
          type: string
          description: Identificador do programa que será vinculado ao cartão.
        documentNumber:
          type: string
          description: Número de documento do cliente (CPF ou CNPJ).
        profession:
          type: string
          description: Profissão do cliente.
        cardProxy:
          type: string
          description: Proxy do cartão.
        status:
          type: integer
          description: Status do contrato de crédito.
        contract:
          type: string
          description: Número do contrato de crédito.
        maritalStatus:
          $ref: "#/components/schemas/maritalStatus"
        academicDegree:
          $ref: "#/components/schemas/academicDegree"
        incomeBracket:
          $ref: "#/components/schemas/incomeBracket"
        incomeBracketRange:
          type: number
          description: Renda salarial do cliente.
        expirationDate:
          type: string
          description: Data de expiração da proposta de crédito.
        sex:
          $ref: "#/components/schemas/sex"
        email:
          type: string
          description: E-mail do cliente.
        address:
          $ref: "#/components/schemas/address"
        phone:
          type: object
          description: Número de telefone do cliente.
          properties:
            type:
              $ref: "#/components/schemas/phoneType"
            value:
              type: string
              description: Número do telefone do cliente.
            countryCode:
              type: string
              description: Código DDI do país.
        creditEvaluation:
          type: object
          properties:
            status:
              type: integer
            evaluatedAt:
              type: string
            reasonRefusal:
              type: string
            policy:
              type: string
        acceptanceTerm:
          $ref: "#/components/schemas/acceptanceTerm"
        acceptanceTermHistory:
          type: array
          items:
            $ref: "#/components/schemas/acceptanceTerm"
  
    getDataPciRequest:
      type: object
      properties:
        password:
          type: string
          description: Senha informada na criação do cartão (4 dígitos).
      required:
        - password
    
    incomeBracket:
      type: string
      description: Renda salarial do cliente.
      enum:
        - LessThousand
        - FromThousandToTwoThousand
        - FromTwoThousandToThreeThousand
        - FromThreeThousandToFiveThousand
        - FromFiveThousandToTenThousand
        - FromTenThousandToTwentyThousand
        - OverTwentyThousand
                    
    maritalStatus:
      type: string
      description: Estado civil do cliente.
      enum:
        - Single
        - Married
        - Separated
        - Divorced
        - Widower

    phoneType:
      type: string
      description: Tipo de telefone do cliente.
      enum:
        - Residential
        - Commercial
        - Mobile
   
    resultTransactionResponse:
      type: object
      properties:
        nextPage:
          type: string
          description: Identificador da próxima página.
        hasLastPage:
          type: boolean
          description: Indica se existe a próxima página na consulta.
        transactions:
          type: array
          description: Transações do cartão.
          items:
            type: object
            properties:
              account:
                type: object
                properties:
                  number: 
                    type: string
                    description: Número da conta na qual o cartão foi transacionado.
                  agency: 
                    type: string
                    description: Agencia da conta na qual o cartão foi transacionado.
              amount:
                type: object
                properties:
                  value: 
                    type: number
                    description: Valor total da transação.
                  local: 
                    type: number
                    description: Valor da transação na moeda local.
                  net: 
                    type: number
                    description: Valor líquido da transação.
                  iof: 
                    type: number
                    description: Valor do imposto de operações financeira.
                  markup: 
                    type: number
                    description: Tarifa de conversão de moeda em caso de compras internacional.
              merchant:
                type: object
                properties:
                  id: 
                    type: string
                    description: Identificador do comerciante.
                  name: 
                    type: string
                    description: Nome do comerciante.
                  mcc: 
                    type: string
                    description: Código identificador do ramo de negócio do comerciante.
                  city: 
                    type: string
                    description: Cidade onde ocorreu a transação.
              authorizationCode:
                type: string
                description: Indentificador da transação na adquirente.
              countryCode:
                type: string
                description: Código do país onde ocorreu a transação.
              currencyCode:
                type: string
                description: Códiga da moeda que foi realizada a transação.
              entryMode:
                type: string
                $ref: "#/components/schemas/entryModeTypes"
                description: Identificador da forma que a transação foi realizada.
              status:
                type: string
                $ref: "#/components/schemas/transactionsStatus"
                description: Status da transação.
              transactionTimestamp:
                type: string
                description: Data em que ocorreu a transação (formato 'yyyy-MM-ddTHH:mm:ss+00:00').
              transactionType:
                type: string
                $ref: "#/components/schemas/transactionTypes"
                description: Indica a operação da transação.

    sex:
      type: string
      description: Gênero do cliente.
      enum:
        - Male
        - Female
        - Other
    
    trackingErrorResponse:
      type: object
      properties:
        reference:
          type: string
          description: Link para documentação de integração.
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                description: Código de erro.
              message:
                type: string
                description: Mensagem explicativa do erro.
                  
    trackingResponse:
      type: object
      properties:
        createdDate:
          type: string
          description: Data de criação do rastreio (formato 'yyyy-MM-ddTHH:mm:ss').
        externalTracking:
          type: object
          description: Objeto para rastreio de serviço externo
          properties:
            code:
              type: string
              description: Código de rastreio junto ao serviço externo.
            partner: 
              type: string
              description: Nome do parceiro do serviço externo.
        name:
          type: string
          description: Nome impresso no cartão.
        alias:
          type: string
          description: Apelido impresso no cartão.
        estimatedDeliveryDate:
          type: string
          description: Data prevista de entrega do cartão (formato 'yyyy-MM-ddTHH:mm:ss').
        address:
          type: array
          description: Lista de endereços do rastreio
          items:
            properties:
              zipCode:
                type: string
                description: CEP.
              address:
                type: string
                description: Logradouro.
              number:
                type: string
                description: Número.
              neighborhood:
                type: string
                description: Bairro.
              complement:
                type: string
                description: Complemento.
              city:
                type: string
                description: Cidade.
              state:
                type: string
                description: Estado (formato UF).
              country:
                type: string
                description: País.
              isActive:
                type: boolean
                description: Situação de endereço de rastreio.
        status:
          type: array
          description: Histórico de status do rastreio.
          items:
            type: object
            properties:
              createdDate:
                type: string
                description: Data em que o status foi aplicado (formato 'yyyy-MM-ddTHH:mm:ss').
              type:
                type: string
                $ref: "#/components/schemas/trackingStatus"
                description: Status aplicado.
              reason:
                type: string
                description: Motivo do status.
        finalized:
          type: array
          description: Histórico de baixa do rastreio.
          items:
            type: object
            properties:
              createdDate:
                type: string
                description: Data em que a baixa foi adicionada (formato 'yyyy-MM-ddTHH:mm:ss').
              recipientName:
                type: string
                description: Nome do recebedor do cartão.
              recipientKinship:
                type: string
                description: Grau de parentesco com o titular do cartão.
              documentNumber:
                type: string
                description: Documento do recebedor do cartão.
              attempts:
                type: number
                description: Quantidade de tentativas de entrega.

    trackingStatus:
      type: string
      enum:
        - Created
        - InProgress
        - NotDelivered
        - Cancelled
        - Custody
        - Delivered
    
    transactionsStatus:
      type: string
      enum:
        - TransactionHoldWasReproved
        - TransactionHoldWasApproved
        - TransactionWasReversed
        - TransactionHoldWasExpired
        - TransactionWasConfirmed
        - TransactionWasReversedInSecondInstance
        - TransactionVoucherWasCreated
   
    transactionTypes:
      type: string
      enum:
        - Unknown
        - Purchase
        - Withdrawal
        - Refund
        - Balance
    
    updateTrackingAddressRequest: 
          type: object
          description: Informações sobre endereço para nova tentativa de entrega.
          properties:
            zipCode:
              type: string
              description: O CEP deve ser nacional e conter oito dígitos.
            address:
              type: string
              description: Nome do logradouro em que o cliente deseja receber o cartão.
            number:
              type: string
              description: Número do imóvel com até 10 caracteres (se não existir, substitua por “S/N”).
            neighborhood:
              type: string
              description: Bairro para nova entrega.
            complement:
              type: string
              description: Complemento do endereço.
            city:
              type: string
              description: Nome da cidade para a entrega.
            state:
              type: string
              description: "Estado (UF) do novo endereço de entrega. Deve-se respeitar o formato proposto pela ISO 3166-2:BR. Exemplo: SP."
            country:
              type: string
              description: "Serão aceitos apenas endereços em território nacional. Deve-se respeitar o formato proposto pela ISO 3166-1. Exemplo: BR."
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
    
    walletTypes:
      type: string
      enum:
        - GooglePay
    

    CycleType:
      enum:
        - 1
        - 2
        - 3
        - 4
      type: integer
      description: Situação da fatura Open/Future/Closed/Duedate (Atrasado).
      format: int32
    StatementPaymentStatus:
      enum:
        - 1
        - 2
        - 3
      type: integer
      description: Situação do pagamento da fatura Pending/Paid/PartialPaid.
      format: int32
    CardDto:
      type: object
      properties:
        proxy:
          type: string
          nullable: true
          description: Identificador do cartão utilizado na transação.
        lastFourDigits:
          type: string
          nullable: true
          description: Quatro últimos dígitos do cartão.
        alias:
          type: string
          nullable: true
          description: Apelido dado ao cartão.
        cardType:
          type: string
          nullable: true
          description: Tipo do cartão, o qual pode ser Physical ou Virtual.
      additionalProperties: false
    TransactionInvoiceDto:
      type: object
      properties:
        nsu:
          type: string
          nullable: true
        merchant:
          type: string
          nullable: true
          description: Informações referentes ao estabelecimento/comerciante que aceitou a transação. Seus campos são baseados na ISO 8583.
        mcc:
          type: string
          nullable: true
          description: Código mcc da transação.
        entrymode:
          type: string
          nullable: true
          description: Código que identifica o tipo da transação.
        mcg:
          type: string
          nullable: true
          description: Descrição do tipo do mcc.
        card:
          $ref: '#/components/schemas/CardDto'
      additionalProperties: false
    AmountType:
      enum:
        - 0
        - 1
        - 2
        - 3
      type: integer
      format: int32
      description: Indicador do item de fatura, o qual pode ser XXXXXX.
    AmountInvoiceDto:
      type: object
      properties:
        amountType:
          $ref: '#/components/schemas/AmountType'
        value:
          type: number
          format: double
          description: Valor do item da fatura.
        currency:
          type: string
          nullable: true
          description: Código da moeda de acordo com a ISO-4217 (exemplo BRL).
      additionalProperties: false
    FeeType:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
      type: integer
      format: int32
      description: Tipo da taxa NotMapper/Iof/Markup/DailyIof/Interest.
    FeeInvoiceDto:
      type: object
      properties:
        feeType:
          $ref: '#/components/schemas/FeeType'
        value:
          type: number
          format: double
          description: Valor da taxa.
      additionalProperties: false
    ItemInvoiceDto:
      type: object
      properties:
        statementNumber:
          type: integer
          format: int32
          description: Número da parcela.
        statementTotal:
          type: integer
          format: int32
          description: Total de parcelas.
        isCredit:
          type: boolean
          description: Indica se é uma operação de crédito (true) ou débito (false).
        transactionDate:
          type: string
          format: date-time
          description: Data que ocorreu a transação.
        transactionType:
          type: string
          nullable: true
          description: Tipo da transação (COMO COLOCAR TODAS AS OPÇÕES??!).
        proxy:
          type: string
          nullable: true
          readOnly: true
          description: XXXXXXX.
          deprecated: true
        cardLastFourDigits:
          type: string
          nullable: true
          readOnly: true
          description: XXXXXXXX.
          deprecated: true
        cardAlias:
          type: string
          nullable: true
          readOnly: true
          description: XXXXXX.
          deprecated: true
        transaction:
          $ref: '#/components/schemas/TransactionInvoiceDto'
        amounts:
          type: array
          items: {$ref: '#/components/schemas/AmountInvoiceDto'}
          nullable: true
        fees:
          type: array
          items: {$ref: '#/components/schemas/FeeInvoiceDto'}
          nullable: true
        statementItemId:
          type: integer
          format: int32
          description: Indicador do item de fatura.
        transactionDescription:
          type: string
          nullable: true
          description: Descritivo do item da fatura.
      additionalProperties: false
    PaymentType:
      enum:
        - 1
        - 2
        - 3
        - 4
      type: integer
      format: int32
      description: Opção de pagamento, o qual pode ser Cash/Partial/InstallmentWithEntry/InstallmentWithoutEntry.
    PaymentOptionType:
      enum:
        - 1
        - 2
      type: integer
      format: int32
      description: Forma de pagamento (Billet- COMO ASSIM????).
    PaymentStatus:
      enum:
        - 1
        - 2
        - 3
      type: integer
      format: int32
      description: Situação do pagamento, o qual pode ser Pending () ou Paid ().
    InvoicePaymentDto:
      type: object
      properties:
        paymentId:
          type: integer
          format: int32
          description: Identificador único do pagamento.
        paymentOptionId:
          type: integer
          format: int32
          description: Identificador único da opção de pagamento.
        externalId:
          type: string
          nullable: true
          description: Número identificador do boleto.
        bankAccount:
          type: string
          nullable: true
          description: Número da conta do recebedor.
        paymentBilletId:
          type: string
          nullable: true
          description: Código de registro do boleto.
        bankAgency:
          type: string
          nullable: true
          description: Agência da conta do recebedor.
        amount:
          type: number
          format: double
          description: Valor do pagamento.
        dueDate:
          type: string
          format: date-time
          description: Data de vencimento do pagamento.
        paymentOptionType:
          $ref: '#/components/schemas/PaymentOptionType'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        digitableLine:
          type: string
          nullable: true
          description: Linha digitavél do boleto de pagamento.
        paymentDate:
          type: string
          format: date-time
          nullable: true
          description: Data de pagamento.
        liquidatedPaymentDate:
          type: string
          format: date-time
          nullable: true
          description: Data de liquidação do pagamento.
        processorPaymentTrackingId:
          type: string
          nullable: true
          description: Identificador da liquidação na processadora.
        processorPaymentAuthorizationId:
          type: string
          nullable: true
          description: Identificador da transação de pagamento na processadora.
      additionalProperties: false
    CreditLetterType:
      enum:
        - 0
        - 1
      type: integer
      format: int32
      description: XXXXXXX.
    InstallmentDto:
      type: object
      properties:
        creditOfferId:
          type: integer
          format: int32
          description: Identificador único da proposta.
        amortizationAmount:
          type: number
          format: double
          description: Valor da amortização no contrato.
        currentBalance:
          type: number
          format: double
          description: XXXXX.
          nullable: true
        dueBalance:
          type: number
          format: double
          description: XXXXXX.
        dueDate:
          type: string
          format: date-time
          description: Data de vencimento da parcela.
        interestAmount:
          type: number
          format: double
          description: Valor do juros da parcela.
        iofAmount:
          type: number
          format: double
          description: Valor do IOF da parcela.
        paymentAmount:
          type: number
          format: double
          description: Valor da parcela.
        installmentNumber:
          type: integer
          format: int32
          description: Número da parcela.
      additionalProperties: false
    CreditOfferDto:
      type: object
      properties:
        creditOfferId:
          type: integer
          format: int32
          description: Identificador único da proposta.
        externalOperationId:
          type: string
          nullable: true
          description: Identificador externo para a proposta.
        externalOfferId:
          type: string
          nullable: true
          description: Identificador externo da proposta.
        externalOfferType:
          type: string
          nullable: true
          description: Tipo externo da proposta retornada, o qual pode ser variable ou fixed.
        amountCurrency:
          type: string
          nullable: true
          description: Código da moeda de acordo com a ISO-4217 (exemplo BRL).
        amountDue:
          type: number
          format: double
          description: Valor contratado da proposta mais o valor total de juros (Pode ou não conter TAC).
        annualCet:
          type: number
          format: double
          description: CET (custo efetivo total) da contratação calculado ao ano.
        annualInterestRate:
          type: number
          format: double
          description: Taxa de juros anual da contratação.
        cet:
          type: number
          format: double
          description: CET (custo efetivo total) da contratação calculado na periodicidade definida das parcelas.
        disbursementDate:
          type: string
          format: date-time
          description: Data prevista para o desembolso da proposta.
        externalCreatedAt:
          type: string
          format: date-time
          description: Data do cálculo da proposta no formato ISO 8601.
        externalExpiresAt:
          type: string
          format: date-time
          description: Data de expiração da proposta no formato ISO 8601.
        firstPaymentDate:
          type: string
          format: date-time
          description: Data do 1º pagamento da proposta no formato ISO 8601.
        graceDays:
          type: integer
          format: int32
          description: Quantidade de dias para a carência do 1º pagamento.
        lastPaymentDate:
          type: string
          format: date-time
          description: Data do último pagamento da proposta.
        paymentAmount:
          type: number
          format: double
          description: xxxxx
        loanAmount:
          type: number
          format: double
          description: Valor do crédito solicitado para contratação.
        monthlyInterestRate:
          type: number
          format: double
          description: Taxa de juros mensal da contratação.
        openingAccountFee:
          type: number
          format: double
          description: xxxxx
        operationCostAmount:
          type: number
          format: double
          description: Custo de processamento da operação.
        periodicity:
          type: string
          nullable: true
          description: xxxx
        retentionRate:
          type: number
          format: double
          description: Indica o percentual de retenção da proposta.
        term:
          type: integer
          format: int32
          description: Quantidade de parcelas da proposta.
        totalInterestAmount:
          type: number
          format: double
          description: Valor total de juros a ser pago na contratação.
        totalPaymentAmount:
          type: number
          format: double
          description: Valor total a ser pago no final do contrato (se aplicável ao produto).
        iofTotalAmount:
          type: number
          format: double
          description: Valor final do cálculo do IOF.
        iofTotalPercentage:
          type: number
          format: double
          description: Valor percentual do IOF, se aplicável.
        confirmedOffer:
          type: boolean
          description: Retorna se a oferta está confirmada.
        entryAmount:
          type: number
          format: double
          description: xxxx
        downPayment:
          type: number
          format: double
          description: xxxxx
        creditLetterType:
          $ref: '#/components/schemas/CreditLetterType'
        installments:
          type: array
          items: {$ref: '#/components/schemas/InstallmentDto'}
          nullable: true
      additionalProperties: false
    PaymentOptionsDto:
      type: object
      properties:
        paymentOptionId:
          type: integer
          format: int32
          description: Identificador único da opção de pagamento.
        statementId:
          type: integer
          format: int32
          description: Identificador único da fatura.
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        value:
          type: number
          format: double
          description: Valor a ser pago (no caso de parcelamente será a entrada).
        payment:
          type: array
          items: {$ref: '#/components/schemas/InvoicePaymentDto'}
          nullable: true
        creditOffer:
          $ref: '#/components/schemas/CreditOfferDto'
      additionalProperties: false
    InvoiceDto:
      type: object
      properties:
        statementId:
          type: integer
          format: int32
          description: Identificador único da fatura.
        month:
          type: integer
          format: int32
          description: Representa o mês de vencimento da fatura.
        year:
          type: integer
          format: int32
          description: Representa o ano de vencimento da fatura.
        cycle:
          type: integer
          format: int32
          description: Indicador do ciclo da fatura (por contrato de crédito).
        cycleCloseDate:
          type: string
          format: date-time
          description: Data de fechamento da fatura.
          nullable: true
        dueDateStart:
          type: string
          format: date-time
          description: Data inicial do período da fatura.
        dueDateEnd:
          type: string
          format: date-time
          description: Data final do período da fatura.
          nullable: true
        dueDate:
          type: string
          format: date-time
          description: Data de vencimento da fatura.
        amountMinimal:
          type: number
          format: double
          description: Valor mínimo a ser pago da fatura. Apenas é calculado após o fechamento da fatura..
          nullable: true
        balance:
          type: number
          format: double
          description: Valor total da fatura.
          nullable: true
        cycleType:
          $ref: '#/components/schemas/CycleType'
        documentNumber:
          type: string
          nullable: true
          description: XXXXX.
        paymentStatus:
          $ref: '#/components/schemas/StatementPaymentStatus'
        statementItens:
          type: array
          items: {$ref: '#/components/schemas/ItemInvoiceDto'}
          nullable: true
        paymentOptions:
          type: array
          items: {$ref: '#/components/schemas/PaymentOptionsDto'}
          nullable: true
      additionalProperties: false
    LayerEnum:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      type: integer
      format: int32
    Error:
      type: object
      properties:
        code:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        layer:
          $ref: '#/components/schemas/LayerEnum'
        applicationName:
          type: string
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties:
        type: object
        additionalProperties: false
    InvoiceResumeDto:
      type: object
      properties:
        statementId:
          type: integer
          format: int32
          description: Identificador único da fatura.
        month:
          type: integer
          format: int32
          description: Representa o mês de vencimento da fatura.
        year:
          type: integer
          format: int32
          description: Representa o ano de vencimento da fatura.
        cycle:
          type: integer
          format: int32
          description: Indicador do ciclo da fatura (por contrato de crédito).
        dueDate:
          type: string
          format: date-time
          description: Data de vencimento da fatura.
        amountMinimal:
          type: number
          format: double
          description: Valor mínimo a ser pago da fatura, só é calculado após o fechamento da fatura.
        balance:
          type: number
          format: double
          description: Valor total da fatura.
        cycleType:
          $ref: '#/components/schemas/CycleType'
        paymentStatus:
          $ref: '#/components/schemas/StatementPaymentStatus'
        paymentTotalAmount:
          type: number
          format: double
          description: Valor pago.
          nullable: true
      additionalProperties: false
    PreviousResumeInvoicesDto:
      type: object
      properties:
        statements:
          type: array
          items: {$ref: '#/components/schemas/InvoiceResumeDto'}
          nullable: true
      additionalProperties: false
    CreditLimitDto:
      type: object
      properties:
        totalCreditLimit:
          type: number
          format: double
          description: Total do limite de crédito aprovado.
        availableLimit:
          type: number
          format: double
          description: Limite crédito disponível.
      additionalProperties: false
    CreatePaymentCommand:
      type: object
      properties:
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        value:
          type: number
          format: double
          description: Valor a ser pago, caso o tipo de pagamento escolhido tenha sido Partial.
        paymentOptionId:
          type: integer
          format: int32
          description: XZXXXXXXX. Condição do parcelamento (Necessário somente nos tipos InstallmentWithEntry/InstallmentWithoutEntry).
          nullable: true
      additionalProperties: false
    PaymentStatusDto:
      type: object
      properties:
        status:
          type: string
          nullable: true
          description: Situação do pagamento, o qual pode ser Pending ou Paid (ENUM).
        digitableLine:
          type: string
          nullable: true
          description: Linha digitável do boleto de pagamento.
        authenticationCode:
          type: string
          nullable: true
          description: Identificador da forma de pagamento.
      additionalProperties: false
    CreateSimulationOfInstallmentsCommand:
      type: object
      properties:
        minTerm:
          type: integer
          format: int32
        maxTerm:
          type: integer
          format: int32
      additionalProperties: false
    PaymentOptionsInstallmentsDto:
      type: object
      properties:
        paymentOptionId:
          type: integer
          format: int32
          description: Identificador único da opção de pagamento.
        statementId:
          type: integer
          format: int32
          description: Identificador único da fatura.
        paymentType:
          $ref: '#/components/schemas/PaymentType'
        value:
          type: number
          format: double
          description: XXXXX.
        creditOffer:
          $ref: '#/components/schemas/CreditOfferDto'
      additionalProperties: false



x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
  samples-languages:
    - curl
