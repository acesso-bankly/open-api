openapi: 3.0.1
info:
  version: 1.0.0
  title: Gestão de cartões
  description: |
    Solicite e gerencie cartões vinculados à conta do seu cliente em poucos
    minutos. Consulte também nossa
    [documentação](https://bankly.readme.io/v1.0/docs/) para mais detalhes sobre
    os fluxos de negócio.
servers:
  - url: 'https://api-mtls.sandbox.bankly.com.br'
paths:
  
  /cards/batches/:
    post:
      tags:
        - Cartões No Name
      summary: Criação de cartão em lote
      description: |
        <div class="bkly-ref-description">
          <p>Crie um lote de cartões sem vínculo com uma conta (Cartão No Name).</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Criação de cartão em lote](/docs/criacao-de-cartoes-em-lote)."
        }
        [/block]
      operationId: cardCreateCardsInLot
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCardsInLotRequest"
      responses:
        '202':
          description: A solicitação foi aceita e o cartão em lote está sendo criado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createCardInLotResponse"
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
          uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/
          passthroughBehavior: when_no_match
          connectionType: VPC_LINK
          connectionId: m116y5
          httpMethod: POST
          type: http
          requestParameters:
            integration.request.header.api-version: method.request.header.api-version
            integration.request.header.Authorization: method.request.header.Authorization
          responses:
            '202':
              statusCode: 202
            '400':
              statusCode: 400
            '401':
              statusCode: 401
            '406':
              statusCode: 406
            '409':
              statusCode: 409
            '500':
              statusCode: 500
  
  /cards/activateCode/{activateCode}/binding/:
    patch:
      tags:
        - Cartões No Name
      summary: Vinculação do cartão com uma conta bancária
      description: |
        <div class="bkly-ref-description">
          <p>Vincule um cartão a uma conta, para que ele seja ativado e para que seja possível definir uma senha para ele.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Vinculação do cartão com uma conta bancária](/docs/vinculacao-cartao-com-conta)."
        }
        [/block]
      operationId: cardbindNoName
      parameters:
        - name: activateCode
          in: path
          required: true
          schema:
            type: string
            description: Código de ativação do cartão (12 caracteres).
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bindNoNameRequest"
      responses:
        '200':
          description: Vínculo realizado.
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"   
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{activateCode}/bindNoName
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.activateCode: method.request.path.activateCode
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/batches/:{lotId}:
    get:
      tags:
        - Cartões No Name
      summary: Consulta de lote por ID
      description: |
        <div class="bkly-ref-description">
          <p>Obtenha os dados de um lote específico de cartões.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Consulta de lote por ID](/docs/consulta-de-lote-por-id)."
        }
        [/block]
      operationId: cardGetLotById
      parameters:
        - name: lotId
          in: path
          required: true
          schema:
            type: string
            description: Id do lote a ser consultado.
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação recebida com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardLotResponse"
              examples:
                response:
                  value:
                    lotId: "LT01"
                    quantityOrder: 1000
                    dateOrder: "2021-06-07T08:30:40"
                    programId: 1
                    address:
                      zipCode: "05402100"
                      address: Avenida Rebouças
                      number: "1368"
                      neighborhood: Pinheiros
                      complement: Em frente a Wizard
                      city: São Paulo
                      state: SP
                      country: Brasil
                    cards: [
                        "2500011000021160417",
                        "2500011000068618940" 
                    ]
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/{id}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.id: method.request.path.id
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '500':
            statusCode: 500

  /cards/batches:
    get:
      tags:
        - Cartões No Name
      summary: Consulta dos lotes
      description: |
        <div class="bkly-ref-description">
          <p>Obtenha os dados de todos os lotes de cartões. </p>  
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Consulta dos lotes](/docs/consulta-de-lotes)."
        }
        [/block]
      operationId: cardGetLotsByCompanyKey
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação recebida com sucesso.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardLotsResponse"
              examples:
                response:
                  value:
                    [
                      {
                        lotId: "LT01",
                        quantityOrder: 1000,
                        companyKey: "Acesso",
                        dateOrder: "2021-06-07T08:30:40",
                        programId: 1
                      }
                    ]             
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          description: Não foram encontrados lotes para essa company key.              
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '204':
            statusCode: 204      
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '500':
            statusCode: 500
  
  /cards/virtual:
    post:
      tags:
        - Criação de cartão
      summary: Cartão virtual
      description:  |
        <div class="bkly-ref-description">
          <p>Crie um cartão virtual que será utilizado em compras não presenciais.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Emissão de cartão virtual](/docs/emissao-cartao-virtual)."
        }
        [/block]
      operationId: cardCreateVirtualCard
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCardRequest"
      responses:
        '202':
          description: A solicitação foi aceita e o cartão está sendo criado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
              examples:
                response:
                  value:
                    proxy: "2370021007715002820"
                    activateCode: "A0DDDC0951D1"
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/virtual
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '406':
            statusCode: 406
          '409':
            statusCode: 409
          '500':
            statusCode: 500
  
  /cards-pci/virtual:
    post:
      tags:
        - Criação de cartão
      summary: Emissão de cartão virtual com criptografia
      description:  |
        <div class="bkly-ref-description">
          <p>Realize a emissão de um cartão virtual por meio de comunicação criptografada.</p> 
          <span class="bkly-ref-small-beta-tag">beta</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Emissão de cartão com dados criptografados](/docs/emissao-cartao-dados-criptografados)."
        }
        [/block]
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createVirtualCardRequestPci"
      responses:
        '202':
          description: A solicitação foi aceita e o cartão está sendo criado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
              examples:
                response:
                  value:
                    proxy: "2370021007715002820"
                    activateCode: "A0DDDC0951D1"
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '403':
          $ref: "http://localhost:3320/commons/components#/components/responses/403"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
  
  /cards/physical:
    post:
      tags:
        - Criação de cartão
      summary: Cartão físico
      description:  |
        <div class="bkly-ref-description">
          <p>Crie um cartão físico que será embossado e entregue no endereço informado.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Emissão de cartão físico](/docs/emissao-cartao-fisico)."
        }
        [/block]
      operationId: cardCreatePhysicalCard
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCardRequest"
      responses:
        '202':
          description: A solicitação foi aceita e o cartão está sendo criado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
              examples:
                response:
                  value:
                    proxy: "2370021007715002820"
                    activateCode: "A0DDDC0951D1"
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/physical
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '406':
            statusCode: 406
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards-pci/physical:
    post:
      tags:
        - Criação de cartão
      summary: Emissão de cartão físico com criptografia
      description:  |
        <div class="bkly-ref-description">
          <p>Realize a emissão de um cartão físico por meio de comunicação criptografada.</p> 
          <span class="bkly-ref-small-beta-tag">beta</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Emissão de cartão com dados criptografados](/docs/emissao-cartao-dados-criptografados)."
        }
        [/block]
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCardRequestPci"
      responses:
        '202':
          description: A solicitação foi aceita e o cartão está sendo criado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '403':
          $ref: "http://localhost:3320/commons/components#/components/responses/403"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
  
  /cards/multiple:
    post:
      tags:
        - Criação de cartão
      summary: Cartão físico múltiplo
      description: |
        <div class="bkly-ref-description">
          <p>Crie um cartão físico múltiplo (pré e pós) que será embossado e entrege no endereço informado pelo cliente.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
        [block:callout]
        {
          "type": "warning",
          "title": "Importante",
          "body": "O cartão múltiplo tem como principal característica ter no mesmo plástico um número pré e um pós. Porém, um dos números ficará adormecido enquanto o outro estiver ativo. Confira a documentação [Emissão de cartão múltiplo](/docs/emissao-cartao-multiplo) para mais informações."
        }
        [/block]
      operationId: cardCreateMultipleCard
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createCardRequest"
      responses:
        '202':
          description: A solicitação foi aceita e o cartão está sendo criado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
              examples:
                response:
                  value:
                    proxy: "2370021007715002820"
                    activateCode: "A0DDDC0951D1"
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/orders/multiple
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/{proxy}/duplicate:
    post:
      tags:
        - Criação de cartão
      summary: Segunda via de cartão
      description: |
        <div class="bkly-ref-description">
          <p>Crie uma segunda via de um cartão físico com as mesmas características da primeira via.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
        [block:callout]
        {
          "type": "warning",
          "title": "Importante",
          "body": "Quando a segunda via for emitida, a primeira via será cancelada automaticamente. Confira a documentação [Emissão de segunda via](/docs/emissao-segunda-via) para mais informações."
        }
        [/block]
      operationId: createDuplicateCard
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createDuplicateCardRequest"
      responses:
        '202':
          description: Cartão
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
              examples:
                response:
                  value:
                    proxy: "2370021007715002820"
                    activateCode: "A0DDDC0951D1"
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
  
  /cards-pci/{proxy}/duplicate:
    post:
      tags:
        - Criação de cartão
      summary: Emissão de segunda via com criptografia
      description: |
        <div class="bkly-ref-description">
          <p>Emita a segunda via de um cartão físico com as mesmas características da primeira via, por meio de comunicação criptografada.</p> 
          <span class="bkly-ref-small-beta-tag">beta</span> 
          <span class="bkly-ref-scope-tag">scope: card.create</span>
        </div>
        [block:callout]
        {
          "type": "warning",
          "title": "Importante",
          "body": "Quando a segunda via for emitida, a primeira via será cancelada automaticamente. Confira a documentação [Emissão de cartão com dados criptografados](/docs/emissao-cartao-dados-criptografados)."
        }
        [/block]
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createDuplicateCardRequestPci"
      responses:
        '202':
          description: Cartão
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardBuildingResponse"
              examples:
                response:
                  value:
                    proxy: "2370021007715002820"
                    activateCode: "A0DDDC0951D1"
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '403':
          $ref: "http://localhost:3320/commons/components#/components/responses/403"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
        '503':
          $ref: "http://localhost:3320/commons/components#/components/responses/503"
  
  /cards/{proxy}:
    get:
      tags:
        - Consulta de Cartões
      summary: Por proxy
      description: |
        <div class="bkly-ref-description">
          <p>Consulte os dados de um cartão pelo seu proxy.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: GetCardByProxy
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: A solicitação é recebida e retorna o cartão do proxy correspondente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardResponse"
              examples:
                response:
                  value:
                    created: "2020-07-20T22:53:12"
                    companyKey: "Acesso"
                    documentNumber: "00000000000"
                    activateCode: "A9991B2E491D"
                    trackingCode: "4717AEWATCTQ"
                    bankAgency: "0001"
                    bankAccount: "0001"
                    lastFourDigits: "4321"
                    proxy: "22999903520114195"
                    name: Jose da Silva
                    alias: Meu Cartão
                    cardType: Virtual
                    status: InTransitLocked
                    physicalBinds: 
                      [{ proxy: "2300199994444111999", created: "2020-07-20T22:54:03" }]               
                    virtualBind: 
                      proxy: "22999903520114195"
                      created: "2020-07-20T22:55:12"            
                    allowContactless: true
                    address:
                      zipCode: "05402100"
                      address: Avenida Rebouças
                      number: "1368"
                      neighborhood: Pinheiros
                      complement: Em frente a Wizard
                      city: São Paulo
                      state: SP
                      country: Brasil
                    historyStatus:
                      [ { modified: "2020-07-20T22:53:12", value: Building }, { modified: "2020-07-20T22:55:12", value: InTransitLocked } ]
                    wallets:
                      - status: Approved
                        walletType: GooglePay
                        walletFlowAdd: YellowPatch
                      - status: Approved
                        walletType: ApplePay 
                        walletFlowAdd: GreenPatch
                    creditPos:
                      contractNumber: "54684325763"
                      limit: 3000.00
                      limitActive: 1000.00
                    activatedAt: null
                    lastUpdatedAt: "2020-07-20T22:55:12"
                    isActivated: false
                    isLocked: true
                    isCanceled: false
                    isBuilding: false
                    isFirtual: true
                    isPre: true
                    isPos: false
                    isCombo: false
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/document/{documentNumber}:
     get:
      tags:
        - Consulta de Cartões
      summary: Por documento (CPF ou CNPJ)
      description: |
        <div class="bkly-ref-description">
          <p>Consulte os cartões vinculados ao número de documento (CPF ou CNPJ) do titular.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardGetCardsByDocument
      parameters:
        - name: documentNumber
          in: path
          required: true
          description: Número do documento de CPF ou CNPJ (informe somente os números). Tamanho máximo de 14 caracteres.
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Lista com os cartões pertecentes ao documento.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/cardResponse"
              examples:
                response:
                  value:
                    - created: "2020-07-20T22:53:12"
                      companyKey: "Acesso"
                      documentNumber: "00000000000"
                      activateCode: "A9991B2E491D"
                      trackingCode: "4717AEWATCTQ"
                      bankAgency: "0001"
                      bankAccount: "0001"
                      lastFourDigits: "4321"
                      proxy: "22999903520114195"
                      name: Jose da Silva
                      alias: Meu Cartão
                      cardType: Virtual
                      status: InTransitLocked
                      physicalBinds: 
                        [{ proxy: "2300199994444111999", created: "2020-07-20T22:54:03" }]               
                      virtualBind: 
                        proxy: "22999903520114195"
                        created: "2020-07-20T22:55:12"  
                      allowContactless: true
                      address:
                        zipCode: "05402100"
                        address: Avenida Rebouças
                        number: "1368"
                        neighborhood: Pinheiros
                        complement: Em frente a Wizard
                        city: São Paulo
                        state: SP
                        country: Brasil
                      historyStatus:
                        [ { modified: "2020-07-20T22:53:12", value: Building }, { modified: "2020-07-20T22:55:12", value: InTransitLocked } ]
                      wallets:
                        - status: Approved
                          walletType: GooglePay
                          walletFlowAdd: YellowPatch
                        - status: Approved
                          walletType: ApplePay 
                          walletFlowAdd: GreenPatch
                      creditPos:
                        contractNumber: "54684325763"
                        limit: 3000.00
                        limitActive: 1000.00
                      activatedAt: null
                      lastUpdatedAt: "2020-07-20T22:55:12"
                      isActivated: false
                      isLocked: true
                      isCanceled: false
                      isBuilding: false
                      isFirtual: true
                      isPre: true
                      isPos: false
                      isCombo: false
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"

      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/document/{document}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.documentNumber: method.request.path.documentNumber
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '204':
            statusCode: 204
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/activateCode/{activationCode}:
    get:
      tags:
        - Consulta de Cartões
      summary: Por código de ativação
      description: |
        <div class="bkly-ref-description">
          <p>Consulte os cartões através do seu código de ativação.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardGetByActivateCode
      parameters:
        - name: activationCode
          in: path
          required: true
          description: Código de ativação do cartão (12 caracteres).
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Lista com os cartões com o código de ativação informado.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/cardResponse"
              examples:
                response:
                  value:
                    - created: "2020-07-20T22:53:12"
                      companyKey: "Acesso"
                      documentNumber: "00000000000"
                      activateCode: "A9991B2E491D"
                      trackingCode: "4717AEWATCTQ"
                      bankAgency: "0001"
                      bankAccount: "0001"
                      lastFourDigits: "4321"
                      proxy: "22999903520114195"
                      name: Jose da Silva
                      alias: Meu Cartão
                      cardType: Virtual
                      status: InTransitLocked
                      physicalBinds: 
                        [{ proxy: "2300199994444111999", created: "2020-07-20T22:54:03" }]               
                      virtualBind: 
                        proxy: "22999903520114195"
                        created: "2020-07-20T22:55:12" 
                      allowContactless: true
                      address:
                        zipCode: "05402100"
                        address: Avenida Rebouças
                        number: "1368"
                        neighborhood: Pinheiros
                        complement: Em frente a Wizard
                        city: São Paulo
                        state: SP
                        country: Brasil
                      historyStatus:
                        [ { modified: "2020-07-20T22:53:12", value: Building }, { modified: "2020-07-20T22:55:12", value: InTransitLocked } ]
                      wallets:
                        - status: Approved
                          walletType: GooglePay
                          walletFlowAdd: YellowPatch
                        - status: Approved
                          walletType: ApplePay 
                          walletFlowAdd: GreenPatch
                      creditPos:
                        contractNumber: "54684325763"
                        limit: 3000.00
                        limitActive: 1000.00
                      activatedAt: null
                      lastUpdatedAt: "2020-07-20T22:55:12"
                      isActivated: false
                      isLocked: true
                      isCanceled: false
                      isBuilding: false
                      isFirtual: true
                      isPre: true
                      isPos: false
                      isCombo: false
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/activatecode/{activatecode}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.activateCode: method.request.path.activateCode
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '204':
            statusCode: 204
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/account/{account}:
    get:
      tags:
        - Consulta de Cartões 
      summary: Por conta
      description: |
        <div class="bkly-ref-description">
          <p>Consulte os cartões vinculados a uma conta.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardGetCardsByAccount
      parameters:
        - name: agency
          in: query
          required: false
          description: Número de agência (4 dígitos).
          schema:
            type: string
        - name: account
          in: path
          required: true
          schema:
            type: string
        - name: documentNumber
          in: query
          required: false
          description: Número de documento de CPF ou CNPJ (informe somente os números). Tamanho máximo de 14 caracteres.
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Lista com os cartões pertecentes à conta.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  $ref: "#/components/schemas/cardResponse"
              examples:
                response:
                  value:
                    - created: "2020-07-20T22:53:12"
                      companyKey: "Acesso"
                      documentNumber: "00000000000"
                      activateCode: "A9991B2E491D"
                      trackingCode: "4717AEWATCTQ"
                      bankAgency: "0001"
                      bankAccount: "0001"
                      lastFourDigits: "4321"
                      proxy: "22999903520114195"
                      name: Jose da Silva
                      alias: Meu Cartão
                      cardType: Virtual
                      status: InTransitLocked
                      physicalBinds: 
                        [{ proxy: "2300199994444111999", created: "2020-07-20T22:54:03" }]               
                      virtualBind: 
                        proxy: "22999903520114195"
                        created: "2020-07-20T22:55:12" 
                      allowContactless: true
                      address:
                        zipCode: "05402100"
                        address: Avenida Rebouças
                        number: "1368"
                        neighborhood: Pinheiros
                        complement: Em frente a Wizard
                        city: São Paulo
                        state: SP
                        country: Brasil
                      historyStatus:
                        [ { modified: "2020-07-20T22:53:12", value: Building }, { modified: "2020-07-20T22:55:12", value: InTransitLocked } ]
                      wallets:
                        - status: Approved
                          walletType: GooglePay
                          walletFlowAdd: YellowPatch
                        - status: Approved
                          walletType: ApplePay 
                          walletFlowAdd: GreenPatch
                      creditPos:
                        contractNumber: "54684325763"
                        limit: 3000.00
                        limitActive: 1000.00
                      activatedAt: null
                      lastUpdatedAt: "2020-07-20T22:55:12"
                      isActivated: false
                      isLocked: true
                      isCanceled: false
                      isBuilding: false
                      isFirtual: true
                      isPre: true
                      isPos: false
                      isCombo: false
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/account/{account}?agency={agency}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.agency: method.request.path.agency
          integration.request.path.account: method.request.path.account
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '204':
            statusCode: 204
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/{proxy}/pci:
    post:
      tags:
        - Consulta de Cartões
      summary: Dados de segurança do cartão
      description: |
        <div class="bkly-ref-description">
          <p>Consulte os dados de PCI do cartão (PAN, CVV e data de validade).</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.pci.read</span>
        </div>
      operationId: getDataPci
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
        - name: proxy
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/getDataPciRequest"
      responses:
        '200':
          description: Dados de PCI do cartão.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dataPciResponse"
              examples:
                response:
                  value:
                    cardNumber: "000000000000000"
                    cvv: "000"
                    expirationDate: 05/09
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '503':
          $ref: "http://localhost:3320/commons/components#/components/responses/503"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/pci
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500  
  
  /cards/{proxy}/password:
    patch:
      tags:
        - Gestão de senha
      summary: Alteração de senha
      description: |
        <div class="bkly-ref-description">
          <p>Altere a senha do cartão.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.pci.password.update</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Alteração de senha](/docs/alteracao-de-senha-cartao)."
        }
        [/block]
      operationId: cardChangeCardPassword
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/changeCardPasswordRequest"
      responses:
        '200':
          description: Alteração de senha realizada.
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/password
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.authorization-token: method.request.header.authorization-token
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/limit:
    patch:
      tags:
        - Gestão de limite de crédito
      summary: Alteração de limite ativo de cartão pós-pago
      description: |
        <div class="bkly-ref-description">
          <p>Altere o limite de crédito ativo de um cartão pós-pago.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Alteração de limite ativo de cartão pós-pago](/docs/alteracao-limite-ativo-cartao)."
        }
        [/block]
      parameters:
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/limitAlterationRequest"
      responses:
        '204':
          description: Limite de crédito ativo alterado com sucesso.
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/password
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.authorization-token: method.request.header.authorization-token
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards/{proxy}/activate:
    patch:
      tags:
        - Status do cartão
      summary: Ativação de cartão
      description: |
        <div class="bkly-ref-description">
          <p>Realize a ativação do cartão pela primeira vez.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
      operationId: cardActivateCard
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/activateCardRequest"
      responses:
        '200':
          description: Ativação foi realizada.
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/activate
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500
  
  /cards/{proxy}/status:
    patch:
      tags:
        - Status do cartão
      summary: Alteração do status do cartão
      description: |
        <div class="bkly-ref-description">
          <p>O status do cartão poderá ser alterado para temporário ou definitivo.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
        [block:callout]
        {
          "type": "warning",
          "title": "Importante",
          "body": "É possível cancelar um cartão por meio da alteração do seu status."
        }
        [/block]
      operationId: cardChangeCardStatus
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/changeCardStatusRequest"
      responses:
        '200':
          description: O status foi alterado com sucesso.
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '406':
          $ref: "http://localhost:3320/commons/components#/components/responses/406"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/status
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500 
            
  /cards/{proxy}/contactless:
    patch:
      tags:
        - Status do cartão
      summary: Configuração do contactless
      description: |
        <div class="bkly-ref-description">
          <p>Ative ou desative a função contactless do cartão. Para cartões virtuais, caso o contactless fique desativado, não será possível realizar transações com o uso de carteiras digitais.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
      operationId: cardContactLess
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - name: allowContactless
          in: query
          schema:
            type: boolean
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Alteração realizada com sucesso.
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/contactless?allowContactless={allowContactless}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.query.allowContactless: method.request.path.allowContactless
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500 
  
  /cards/{proxy}/nextStatus:
    get:
      tags:
        - Status do cartão
      summary: Consulta dos próximos status
      description: |
        <div class="bkly-ref-description">
          <p>Consulte todos os possíveis próximos status válidos para o cartão. Serão consideradas as permissões concedidas para o <em>token</em> informado na requisição.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardGetLots
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação recebida. O retorno traz os dados dos lotes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/nextStatusResponse"
              examples:
                response:
                  value:
                    [
                      {
                        value: "ExpiredCanceled",
                        isDefinitive: true
                      }
                    ]         
        '204':
          description: A requisição foi aceita, porém sem dados para exibição.
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '204':
            statusCode: 204      
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '500':
            statusCode: 500  
            
  /cards/{proxy}/transactions:
    get:
      tags:
        - Consulta de transações
      summary: Consulta de transações por cartão
      description: |
        <div class="bkly-ref-description">
          <p>Consulte as transações realizadas no cartão de acordo com os filtros informados. <br /> <b>Importante!</b> A diferença entre a data de início e de fim deverá ser de, no máximo, sete dias.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
      operationId: cardTransactionsByCard
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: Para realizar a consulta da primeira página, <b>não</b> envie esse parâmetro na requisição.
        - name: pageSize
          in: query
          description: O valor máximo permitido é de 100.
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            description: Data de início dos eventos a serem pesquisados, no formato yyyy-mm-dd. Caso necessário, poderá ser feito um filtro incluindo o horário, no formato ISO 8601 - UTC. Utilize esse campo em conjunto com o parâmetro <code>endDate</code> para filtrar eventos por um range de datas.
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            description: Data do final dos eventos a serem pesquisados, no formato yyyy-mm-dd. Caso necessário, poderá ser feito um filtro incluindo o horário, no formato ISO 8601 - UTC Utilize esse campo em conjunto com o parâmetro <code>startDate</code> para filtrar eventos por um range de datas.
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Lista as transações pertencentes ao cartão, além das propriedades referentes à paginação da consulta.
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/resultTransactionResponse"
              examples:
                response:
                  value:
                    - nextPage: "mkzjfhcnnhat84y583hguim49801"
                      hasLastPage: true
                      transactions: 
                        [
                          {
                            account: {
                              number: "000231",
                              agency: "0001"
                            },
                            amount: {
                              value: 138.54,
                              local: 138.54,
                              net: 138.54,
                              iof: 0,
                              markup: 0
                            },
                            merchant: {
                              id: "207001540000011",
                              name: "EC*MERCADOLIVRE",
                              mcc: "0101",
                              city: "SAO PAULO"
                            },  
                            authorizationCode: "823912",
                            countryCode: "BR",
                            currencyCode: "986",
                            entryMode: "Chip",
                            status: "TransactionHoldWasExpired",
                            transactionTimestamp: "2020-09-24T17:21:39.8921566+00:00",
                            transactionType: "Purchase"
                          }
                        ]
        '204':
          description: Não há transações para o cartão fornecido.
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/transactions?startDate={startDate}&endDate={endDate}&pageSize={pageSize}&page={page}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.query.startDate: method.request.query.startDate
          integration.request.query.endDate: method.request.query.endDate
          integration.request.query.page: method.request.query.page
          integration.request.query.pageSize: method.request.query.pageSize
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '202':
            statusCode: 202
          '204':
            statusCode: 204
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '500':
            statusCode: 500

  /cards/{proxy}/tracking:
    get:
      tags:
        - Rastreio de Cartões
      summary: Por proxy
      description: |
        <div class="bkly-ref-description">
          <p>Obtenha o rastreio do cartão pelo seu proxy.</p> 
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.read</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Rastreio de cartões por proxy](/docs/rastreio-cartoes-por-proxy)."
        }
        [/block]
      operationId: trackingGetByProxy
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Solicitação recebida. O retorno é o rastreio do cartão do proxy correspondente.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/trackingResponse"
              examples:
                response:
                  value:
                    createdDate: "2020-07-20T22:53:12"
                    externalTracking:
                      code: "A2327692D592"
                      partner: "CORREIOS"
                    name: Jose da Silva
                    alias: Meu Cartão
                    address:
                      [ { zipCode: "05402100", address: Avenida Rebouças, number: "1368", neighborhood: Pinheiros, complement: Em frente a Wizard, city: São Paulo, state: SP, country: Brasil } ]
                    status:
                      [ { createdDate: "2020-07-20T22:53:12", type: Created, reason: Created  }, { createdDate: "2020-07-20T22:55:12", type: InProgress, reason: In route to delivery } ]
                    finalized:
                      [ { createdDate: "2020-07-20T22:53:12", recipientName: "Maria da Silva", recipientKinship: "Mãe", documentNumber: "1234567", attempts: 1 }]
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/tracking
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            $ref: 'http://localhost:3320/commons/components#/components/responses/404'
          '500':
            $ref: 'http://localhost:3320/commons/components#/components/responses/500'
  
  /cards/{proxy}/tracking/address:
    post:
      tags:
        - Rastreio de Cartões
      summary: Atualização de endereço
      description: |
        <div class="bkly-ref-description">
          <p>Atualize o endereço do destinatário para uma nova tentativa de entrega.</p>
          <span class="bkly-ref-small-stable-tag">stable</span>
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Alteração de endereço](/docs/alteracao-endereco)."
        }
        [/block]
      operationId: trackingUpdateAddress
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateTrackingAddressRequest"
      responses:
        '201':
          description: Endereço cadastrado com sucesso.
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          $ref: 'http://localhost:3320/commons/components#/components/responses/404'
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/tracking
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: GET
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '201':
            statusCode: 201
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '500':
            statusCode: 500

  /cards-pci/{proxy}/wallet/{wallet}/brand/{brand}:
    post:
      tags:
        - Carteiras digitais
      summary: Geração de token
      description: |
        <div class="bkly-ref-description">
          <p>Gere um <em>token</em> com os dados criptografados do cartão para adição do cartão junto a uma carteira digital (Google Pay ou Apple Pay).</p>
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.pci.token.create</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Geração de <em>token</em>](/docs/geracao-de-token)."
        }
        [/block]
      operationId: GenerateTokenizationForWallet
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
            description: Código identificador do cartão.
        - name: wallet
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/walletTypes"
        - name: brand
          in: path
          required: true
          schema:
            type: string
            $ref: "#/components/schemas/brandTypes"
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/generateTokenRequest"
      responses:
        '200':
          description: Resultado da geração do <em>token</em>.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/cardTokenizationResponse"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards-pci/{proxy}/wallet/{wallet}/brand/{brand}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.path.wallet: method.request.path.wallet
          integration.request.path.brand: method.request.path.brand
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500

  /cards-pci/{proxy}/wallet/{wallet}/brand/{brand}/activation-data:
    post:
      tags:
        - Carteiras digitais
      summary: Geração de dados de ativação
      description: |
        <div class="bkly-ref-description">
          <p>Gere um <em>token</em> contendo os dados de ativação (<code>activationData</code>) para a formulação do desafio que confirmará a adição do cartão à carteira digital, em caso de uso de Apple Pay e fluxo de verificação in-App.</p>
          <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.pci.token.create</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Geração de dados de ativação](/docs/geracao-dados-ativacao)."
        }
        [/block]
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
            description: Código identificador do cartão.
        - name: wallet
          in: path
          required: true
          schema:
            type: string
            description: Carteira digital à qual o cartão deverá ser adicionado.
            enum:
              - ApplePay
        - name: brand
          in: path
          required: true
          schema:
            type: string
            $ref: "#/components/schemas/brandTypes"
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      responses:
        '200':
          description: Resultado da geração do <em>token</em>.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/generateActivationDataResponse"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards-pci/{proxy}/wallet/{wallet}/brand/{brand}
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: POST
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.path.wallet: method.request.path.wallet
          integration.request.path.brand: method.request.path.brand
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '409':
            statusCode: 409
          '500':
            statusCode: 500
  
  /cards-pci/{proxy}/password:
    patch:
      tags:
        - Gestão de senha
      summary: Alteração de senha com criptografia
      description: |
        <div class="bkly-ref-description">
          <p>Altere a senha de um cartão com segurança, por meio da comunicação criptografada.</p> 
          <span class="bkly-ref-small-beta-tag">beta</span> 
          <span class="bkly-ref-scope-tag">scope: card.pci.password.update</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Processo criptografado de alteração de senha](/docs/alteracao-de-senha-criptografada)."
        }
        [/block]
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
            description: Código identificador do cartão.
        - $ref: "http://localhost:3320/commons/components#/components/parameters/ApiVersion"
        - $ref: "http://localhost:3320/commons/components#/components/parameters/Authorization"
        - $ref: "http://localhost:3320/commons/components#/components/parameters/X-Correlation-Id-Optional"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/changeEncryptedCardPasswordRequest"
      responses:
        '200':
          description: A solicitação foi aceita e a senha foi alterada com sucesso.
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '401':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '403':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"
      x-amazon-apigateway-auth:
        type: NONE
      x-amazon-apigateway-integration:
        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/password
        passthroughBehavior: when_no_match
        connectionType: VPC_LINK
        connectionId: m116y5
        httpMethod: PATCH
        type: http
        requestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.authorization-token: method.request.header.authorization-token
          integration.request.header.api-version: method.request.header.api-version
          integration.request.header.Authorization: method.request.header.Authorization
        responses:
          '200':
            statusCode: 200
          '400':
            statusCode: 400
          '401':
            statusCode: 401
          '404':
            statusCode: 404
          '409':
            statusCode: 409
          '500':
            statusCode: 500

    get:
      tags:
        - Gestão de senha
      summary: Consulta de senha com criptografia
      description: |
        <div class="bkly-ref-description">
          <p>consulte a senha de um cartão por meio de comunicação criptografada.</p> 
          <span class="bkly-ref-small-beta-tag">beta</span> 
          <span class="bkly-ref-scope-tag">scope: card.pci.read</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Consulta de senha com criptografia](/docs/consulta-senha-criptografada)."
        }
        [/block]
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
            description: Código identificador do cartão.
        - $ref: "http://localhost:3320/commons/components#/components/parameters/ApiVersion"
        - $ref: "http://localhost:3320/commons/components#/components/parameters/Authorization"
      responses:
        '200':
          description: Recurso encontrado.
        '403':
          $ref: "http://localhost:3320/commons/components#/components/responses/401"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"

  /cards/{proxy}/duedate-expiration:
    put:
      tags:
        - Configuração do cartão
      summary: Alteração da data de vencimento
      description: |
        <div class="bkly-ref-description">
          <p>Altere a data de vencimento da fatura do cartão de crédito do seu cliente.</p> 
        <span class="bkly-ref-small-stable-tag">stable</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Alteração da data de vencimento](/docs/alteracao-data-de-vencimento)."
        }
        [/block]
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
            description: Código identificador do cartão.
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
        - name: x-bkly-license
          in: header
          required: true
          schema:
            type: string
            description: Identificador da licença bancária utilizada pelo parceiro.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/dueDateAlterationRequest"
      responses:
        '204':
          description: A solicitação foi aceita e a data de vencimento da fatura do cartão foi alterada com sucesso.
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '404':
          $ref: "http://localhost:3320/commons/components#/components/responses/404"
        '409':
          $ref: "http://localhost:3320/commons/components#/components/responses/409"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"

  /cards/{proxy}/functionalityStatus:
    patch:
      tags:
        - Configuração do cartão
      summary: Alteração de status de modalidade
      description: |
        <div class="bkly-ref-description">
          <p>Realize o bloqueio temporário de uma das modalidade do cartão do tipo combo (débito ou pós) ou habilite uma modalidade que havia sido bloqueada.</p> 
          <span class="bkly-ref-small-beta-tag">beta</span> 
          <span class="bkly-ref-scope-tag">scope: card.update</span>
        </div>
        [block:callout]
        {
          "type": "info",
          "title": "Nota",
          "body": "Para mais informações, confira a documentação [Alteração de status de modalidade](/docs/alteracao-status-modalidade)."
        }
        [/block]
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
            description: Código identificador do cartão.
        - $ref: "#/components/parameters/apiVersion"
        - $ref: "#/components/parameters/authorization"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeFunctionalityStatusCommand'
      responses:
        '200':
          description: Status da modalidade alterado com sucesso.
        '400':
          $ref: "http://localhost:3320/commons/components#/components/responses/400"
        '500':
          $ref: "http://localhost:3320/commons/components#/components/responses/500"

security:
  - bearerAuth: []

components:
  
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  
  parameters:
    apiVersion:
      name: api-version
      in: header
      required: true
      schema:
        type: string
        description: Versão da API. Atualmente estamos na versão 1.0.
        
    authorization:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        description: <em>Token</em> de autorização do tipo Bearer.

    DocumentNumber:
      name: documentNumber
      in: path
      required: true
      schema:
        type: string
        nullable: true
        description: Número de documento de CPF ou CNPJ. Informe somente os números.

    Proxy:
      name: proxy
      in: path
      required: true
      schema:
        type: string
        nullable: true
        description: Identificador do cartão.

  schemas:
       
    academicDegree:
      type: string
      description: Grau de instrução do cliente.
      enum:
        - HighSchool
        - Graduated
        - PostGraduate
        - Masters
        - Doctorate
   
    acceptanceContractRequest:
      type: object
      properties:
        documentNumber:
          type: string
          description: Número de documento (CPF ou CNPJ). Informe somente números.
        contract:
          type: string
          description: Número do contrato de crédito.
        dataHash:
          type: string
          description: Termos e condições aceitos pelo cliente.
      required:
        - documentNumber
        - contract
        - dataHash

    acceptanceTerm:
      type: object
      properties:
        signedAt:
          type: string
          format: date-time
          description: Data e hora em que o contrato de crédito foi aceito/assinado.
        creditDetails:
          type: object
          properties:
            diaryIof:
              type: number
              description: Valor diário do Imposto sobre Operações Financeiras (IOF).
            fixedIof:
              type: number
              description: Valor fixo do Imposto sobre Operações Financeiras (IOF).
            internationalIof:
              type: number
              description: Valor internacional do Imposto sobre Operações Financeiras (IOF).
            daysAdvanceCut:
              type: integer
              description: Quantidade de dias, a partir do dia de vencimento, até o fechamento da fatura.
            futureCalendarMonths:
              type: integer
              description: Número de faturas pré-cadastradas na base de criação da conta.
            daysAccountLockDelay:
              type: integer
              description: Quantidade de dias após o atraso no pagamento da fatura em que será realizado o bloqueio do cartão.
            accrualStop:
              type: integer
              description: Quantidade de dias, após o atraso no pagamento da fatura, para que o cliente entre em negociação de dívida.
            delayInvoiceRate:
              type: number
              description: Valor cobrado pelo atraso do pagamento da fatura (além dos juros).
            rotatingRate:
              type: number
              description: Taxa de juros cobrada para faturas não pagas ou pagas parcialmente.
            minimumValueOfRefinanceInstallment:
              type: number
              description: Valor mínimo de parcela para faturas que terão o pagamento parcelado.
            invoiceRefinanceRate:
              type: number
              description: Valor cobrado pelo parcelamento do pagamento da fatura (além dos juros).
            maximumNumberInstallmentsRefinance:
              type: integer
              description: Número máximo de parcelas para pagamento parcelado da fatura.
            annualValue:
              type: number
              description: Valor cobrado anualmente para que o cliente tenha o cartão ativo.
            annuityInstallments:
              type: integer
              description: Número máximo de parcelas no qual o valor da anuidade pode ser dividido.
            iofFirstDay:
              type: boolean
              description: Indica se o cálculo de IOF será feito no primeiro dia do mês (true) ou na data de corte da fatura (false).
            minimumAmountInstallmentAgreementInvoice:
              type: number
              description: Valor mínimo referente ao pagamento da fatura após o início da fase de negociação.
            minimumEntryInvoiceAgreement:
              type: number
              description: Valor mínimo referente ao pagamento da fatura no início da fase de negociação.
            maximumEntryInvoiceAgreement:
              type: number
              description: Valor máximo referente ao pagamento da fatura no início da fase de negociação.
            minimumPercentageInvoiceAgreement:
              type: number
              description: Taxa mínima referente ao pagamento da fatura no início da fase de negociação.
            maximumEntryAgreementInvoicePercentage:
              type: number
              description: Taxa máxima referente ao pagamento da fatura no início da fase de negociação.
            deadlineInDaysForNewAnalysisRequest:
              type: integer
              description: Quantidade de dias em que o cliente pode solicitar uma nova avaliação, após a reprovação do crédito.
            deadlineInDaysForExpirationOfAnalysis:
              type: integer
              description: Quantidade de dias em que o cliente pode solicitar uma nova avaliação, após a aprovação do crédito.
        dataHash:
          type: string
          description: Termos e condições aceitos pelo cliente.
    
    AcceptCreditLimitIncreaseDto:
      type: object
      required:
        - authorization
        - idState
        - token
        - terms
        - trace
        - userInfo
      properties:
        authorization:
          type: string
          description: <em>Token</em> que o cliente utilizou na assinatura eletrônica, o qual comprova a sua autenticação no site.
          nullable: true
        idState:
          type: string
          description: Identificador do contrato.
          nullable: true
        token:
          type: string
          description: <em>Token</em> de SMS/email que confirma a identidade do usuário que assinou o aceite.
          nullable: true
        terms:
          type: string
          description: "Insira o texto do contrato que foi aceito pelo cliente. Sugestão: pode-se remover as quebras de linha e enviar o texto corrido do aceite."
          nullable: true
        trace:
          type: array
          description: Objeto que contém os dados de rastreio do usuário solicitante.
          items:
            $ref: "#/components/schemas/TraceDto"
          nullable: true
        userInfo:
          $ref: "#/components/schemas/UserInfoDto"
      additionalProperties: false

    account:
      type: object
      description: Objeto com informações sobre a conta do titular do cartão.
      required: 
        - branch
        - number
      properties:
        branch:
          type: string
          description: Número da agência.
        number:
          type: string
          description: Número da conta.

    activateCardRequest:
      type: object
      properties:
        activateCode:
          type: string
          description: Código de ativação do cartão (12 caracteres).
        password:
          type: string
          description: Senha de uso do cartão (4 dígitos).
      required:
        - activateCode
        - password
    
    addressRequest:
      type: object
      description: Endereço do cliente.
      required:
        - zipCode
        - addressLine
        - neighborhood
        - city
        - state
        - country
      properties:
        zipCode:
          type: string
          description: CEP de endereço.
        addressLine:
          type: string
          description: Logradouro (nome da rua, avenida etc.).
        buildingNumber:
          type: string
          description: Número do prédio ou da casa.
        complement:
          type: string
          description: Complemento do endereço.
        neighborhood:
          type: string
          description: Nome do bairro.
        city:
          type: string
          description: Nome da cidade.
        state:
          type: string
          description: Nome do estado.
        country:
          type: string
          description: Nome do país.

    address:
      type: object
      description: Objeto que contém o endereço do cliente.
      properties:
        zipCode:
          type: string
          description: CEP de endereço.
        addressLine:
          type: string
          description: Logradouro (nome da rua, avenida etc.).
        buildingNumber:
          type: string
          description: Número do prédio ou da casa.
        complement:
          type: string
          description: Complemento do endereço.
        neighborhood:
          type: string
          description: Nome do bairro.
        city:
          type: string
          description: Nome da cidade.
        state:
          type: string
          description: Nome do estado.
        country:
          type: string
          description: Nome do país.
    
    bindNoNameRequest:
      type: object
      properties:
        password:
          type: string
          description: Senha que será utilizada nas compras (4 dígitos).
        bankAccount:
          type: string
          description: Número da conta ao qual o cartão será vinculado.
        bankAgency:
          type: string
          description: Número da agência (4 dígitos) do banco ao qual a conta pertence.
        documentNumber:
          type: string
          description: Número do documento (CPF ou CNPJ) do titular da conta. Informe somente números. Tamanho máximo de 14 caracteres.
        alias:
          type: string
          description: Apelido do cartão (não é permitido o uso de caracteres especiais e o tamanho máximo é de 16 caracteres).    
      required:
        - documentNumber
        - password
        - bankAccount
        - bankAgency

    brandTypes:
      type: string
      description: Bandeira do cartão.
      enum:
        - Mastercard
      
    cardBuildingResponse:
      type: object
      properties:
        proxy:
          type: string
          description: Código identificador do cartão.
        activateCode:
          type: string
          description: Código para ativar o cartão.

    cardErrorResponse:
      type: object
      properties:
        reference:
          type: string
          description: Link para documentação de integração.
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                description: Código de erro.
              message:
                type: string
                description: Mensagem explicativa do erro.
    
    cardLotResponse:
      type: object
      properties:
        lotId:
          type: string
          description: Identificador único do lote
        quantityOrder:
          type: integer
          description: Quantidade de cartões solicitados.
        dateOrder:
          type: string
          format: date-time
          description: Data da solicitação de criação do lote.
        programId:
          type: integer
          description: Identificador do programa vinculado ao cartão.
        cards: 
          type: array
          description: Proxy dos cartões.
        address:
          type: object
          description: Informações sobre o endereço de entrega.
          properties:
            zipCode:
              type: string
              description: CEP (informar somente os números).
            address:
              type: string
              description: Logradouro (Nome da rua, avenida etc.).
            number:
              type: string
              description: Número do prédio ou da casa.
            neighborhood:
              type: string
              description: Nome do bairro.
            complement:
              type: string
              description: Complemento do endereço.
            city:
              type: string
              description: Nome da cidade.
            state:
              type: string
              description: Nome do estado (informar a UF).
            country:
              type: string
              description: Nome do país.

    cardLotsResponse:
      type: array
      items:
        type: object
        properties:
          lotId:
            type: string
            description: Identificador único do lote
          quantityOrder:
            type: integer
            description: Quantidade de cartões solicitados.    
          dateOrder:
            type: string
            format: date-time
            description: Data da solicitação de criação do lote.
          programId:
            type: integer
            description: Identificador do programa vinculado ao cartão.
    
    cardResponse:
      type: object
      properties:
        created:
          type: string 
          format: date-time
          description: Data de criação do cartão.
        companyKey:
          type: string
          description: Chave que identifica o parceiro dentro do Bankly.
        documentNumber:
          type: string
          description: Número do documento do cliente (CPF/CNPJ).
        activateCode:
          type: string
          description: Código de ativação do cartão.
        trackingCode:
          type: string
          description: Código de rastreio do cartão. Campo retornado <b>apenas</b> para cartões físicos.
        bankAgency:
          type: string
          description: Número da agência do cliente.
        bankAccount:
          type: string
          description: Número da conta do cliente.
        lastFourDigits:
          type: string
          description: Últimos 04 dígitos do cartão.
        proxy:
          type: string
          description: Código identificador do cartão.
        name:
          type: string
          description: Nome impresso no cartão.
        alias:
          type: string
          description: Apelido impresso no cartão.
        cardType:
          type: string
          $ref: "#/components/schemas/cardTypes"
          description: Tipo do cartão.
        physicalBinds: 
          type: array
          description: Lista de objetos contendo informações sobre os cartões físicos vinculados ao cartão virtual consultado. Essa lista somente será retornada caso o tipo de cartão (cardType) seja "Virtual".
          items:
            type: object
            properties:
              proxy: 
                type: string
                description: Código identificador do cartão físico.
              created: 
                type: string
                format: date-time
                description: Data de criação do cartão.
        virtualBind: 
          type: object
          description: Objeto que contém informações sobre o cartão virtual vinculado ao cartão físico consultado. Esse objeto somente será retornado caso o tipo de cartão (cardType) seja "Physical".
          properties:
            proxy: 
              type: string
              description: Código identificador do cartão virtual.
            created: 
              type: string
              format: date-time
              description: Data de criação do cartão.
        status:
          type: string
          $ref: "#/components/schemas/cardStatus"
          description: Situação do cartão.
        allowContactless:
          type: boolean
          description: Indica se a função contactless está habilitada.
        address:
          type: object
          description: Objeto que contém informações sobre o endereço do titular do cartão.
          properties:
            zipCode:
              type: string
              description: Código postal do endereço.
            address:
              type: string
              description: Logradouro (Nome da rua, avenida etc.).
            number:
              type: string
              description: Número do prédio ou da casa.
            neighborhood:
              type: string
              description: Nome do bairro.
            complement:
              type: string
              description: Complemento do endereço.
            city:
              type: string
              description: Nome da cidade.
            state:
              type: string
              description: Nome do estado.
            country:
              type: string
              description: Nome do país.
        historyStatus:
          type: array
          description: Lista de objetos contendo o histórico de status do cartão desde sua criação.
          items:
            type: object
            properties:
              modified:
                type: string
                format: date-time
                description: Data em que o status foi aplicado.
              value:
                type: string
                $ref: "#/components/schemas/cardStatus"
                description: Nome do status aplicado.
        wallets:
          type: array
          description: Lista de objetos contendo a identificação das carteiras digitais que o cartão encontra-se vinculado. Essa lista somente será retornada se o cartão estiver inserido em uma carteira digital.
          items:
            type: object
            properties:
              status:
                $ref: "#/components/schemas/walletStatus"
                description: Situação do cartão na carteira.
              walletType:
                $ref: "#/components/schemas/walletTypes"
                description: Identificador da carteira que o cartão encontra-se vinculado.
              walletFlowAdd:
                $ref: "#/components/schemas/walletFlows"
                description: Classificação do fluxo que o cartão recebeu ao entrar na carteira.
        creditPos:
          type: object
          description: Objeto que contém informações sobre o limite de crédito do cartão pós-pago. Esse objeto somente será retornado se o cartão consultado for pós-pago.
          properties:
            contractNumber:
              type: string
              description: Número do contrato de crédito do cliente.
            limit:
              type: number
              description: Limite de crédito do cliente.
            limitActive:
              type: number
              description: Limite de crédito ativo do cliente.
        activatedAt:
          type: string
          format: date-time
          description: Data da ativação do cartão.
        lastUpdatedAt:
          type: string
          format: date-time
          description: Data da última atualização do cartão.
        isActivated:
          type: boolean
          description: Indica se o cartão está ativo.
        isLocked:
          type: boolean
          description: Indica se o cartão está bloqueado.
        isCanceled:
          type: boolean
          description: Indica se o cartão está cancelado.
        isBuilding:
          type: boolean
          description: Indica se o cartão está em construção.
        isFirtual:
          type: boolean
          description: Indica se o cartão é Firtual.
        isPre:
          type: boolean
          description: Indica se o cartão é pré-pago.
        isPos:
          type: boolean
          description: Indica se o cartão é pós-pago.
        isCombo:
          type: boolean
          description: Indica se o cartão é combo.
  
    cardStatus:
      type: string
      enum:   
        - Active
        - TemporarilyUserLocked
        - CanceledByCustomer 
        - CanceledByEmitter
        - DeathCanceled
        - LostOrTheftCanceled
    
    cardTokenizationResponse:
      type: object
      properties:
        data:
          type: string
          description: "<em>Token</em> gerado em formato base64, que deverá ser enviado ao SDK da carteira digital correspondente. Importante: para a tokenização na Apple Pay, ao decodificar o <em>token</em>, será obtido um JSON com os campos <code>EphemeralPublicKey</code>, <code>EncryptedData</code>, <code>ActivationData</code>."
        lastFourDigits:
          type: string
          description: Últimos quatro dígitos do cartão.
        phoneNumber:
          type: string
          description: Número de contato do cliente.
        address:
          type: object
          properties:
            zipCode:
              type: string
              description: CEP do endereço.
        
    cardTypes:
      type: string
      enum:
        - Physical
        - Virtual
    
    changeCardPasswordRequest:
      type: object
      properties:
        password:
          type: string
          description: Senha de uso do cartão (4 dígitos).
      required:
        - password
    
    changeCardStatusRequest:
      type: object
      properties:
        status:
          type: string
          $ref: "#/components/schemas/cardStatus"
          description: Status para o qual o cartão será modificado.
        password:
          type: string
          description: Senha de uso do cartão (4 dígitos).
        updateCardBinded:
          type: boolean
          description: Indica se os cartões vinculados devem ser atualizados.
      required:
        - status
        - password
        - updateCardBinded

    changeEncryptedCardPasswordRequest:
      type: object
      properties:
        password:
          type: string
          description: Senha de uso do cartão. A senha deve possuir <b>quatro dígitos</b> e ser transmitida <b>criptografada</b> em formato base64.
      required:
        - password
   
    ChangeFunctionalityStatusCommand:
      type: object
      required:
        - enable
        - functionalityType
        - documentNumber
        - password
      properties:
        enable:
          type: boolean
          description: Campo que indica se a modalidade deverá ser habilitada (true) ou bloqueada temporariamente (false).
        functionalityType:
          $ref: '#/components/schemas/FunctionalityType'
        password:
          type: string
          description: "Senha do cartão. Informe somente números. <b>Importante</b>: dependendo da configuração do programa, o envio deste campo poderá ser opcional."
          nullable: true
        documentNumber:
          type: string
          description: Número de documento de CPF ou CNPJ. Informe somente números.
      additionalProperties: false
    
    createCardInLotResponse:
      type: object
      properties:
        lotId:
          type: string
          description: Identificador único do lote.

    createCardRequest:
      type: object
      properties:
        documentNumber:
          type: string
          description: Número de documento de CPF ou CNPJ (informe somente números). Tamanho máximo de 14 caracteres.
        cardName:
          type: string
          description: Nome que será impresso no cartão (não será permitido o uso de números e caracteres especiais). Tamanho máximo de 19 caracteres.
        alias:
          type: string
          description: Apelido do cartão (não será permitido o uso de caracteres especiais e o tamanho máximo é de 16 caracteres).
        bankAgency:
          type: string
          description: Número de agência (4 dígitos).
        bankAccount:
          type: string
          description: Número de conta ao qual cartão será vinculado.
        programId:
          type: integer
          description: Identificador do programa que será vinculado ao cartão.
        password:
          type: string
          description: "Senha do cartão para realizar transações (preencha com quatro números. Exemplo: '9348')."
        address:
          type: object
          description: Informações sobre endereço (se não for informado, será utilizado o endereço de cadastro do cliente).
          properties:
            zipCode:
              type: string
              description: CEP (informar somente os números).
            address:
              type: string
              description: Logradouro (Nome da rua, avenida etc.).
            number:
              type: string
              description: Número do prédio ou da casa.
            neighborhood:
              type: string
              description: Nome do bairro.
            complement:
              type: string
              description: Complemento do endereço.
            city:
              type: string
              description: Nome da cidade.
            state:
              type: string
              description: Nome do estado (informar a UF).
            country:
              type: string
              description: Nome do país.
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
      required:
        - documentNumber
        - cardName
        - alias
        - bankAgency
        - bankAccount
        - password
        - programId
    
    createCardRequestPci:
      type: object
      properties:
        name:
          type: string
          description: "Nome que será impresso no cartão. <b>Observação</b>: não é permitido o uso de números e caracteres especiais. Tamanho máximo de 19 caracteres."
        alias:
          type: string
          description: "Apelido do cartão. <b>Observação</b>: não é permitido o uso de caracteres especiais. Tamanho máximo de 16 caracteres."
        password:
          type: string
          description: Senha de uso do cartão. A senha deve possuir <b>quatro dígitos</b> e ser transmitida <b>criptografada</b> em formato base64.
        program:
          $ref: "#/components/schemas/program"
        holder:
          $ref: "#/components/schemas/holder"
        embossingCustomFields:
          $ref: "#/components/schemas/embossingFields"
        metadata:
          type: object
          description: Objeto que deverá conter informações adicionais pertinentes ao contexto, representadas por meio de pares de chave e valor.
        paymentDay:
          type: string
          description: Dia de vencimento da fatura.
        address:
          type: object
          description: Informações sobre endereço (se não for informado, será utilizado o endereço de cadastro do cliente).
          properties:
            zipCode:
              type: string
              description: CEP (informar somente os números).
            address:
              type: string
              description: Logradouro (Nome da rua, avenida etc.).
            number:
              type: string
              description: Número do prédio ou da casa.
            neighborhood:
              type: string
              description: Nome do bairro.
            complement:
              type: string
              description: Complemento do endereço.
            city:
              type: string
              description: Nome da cidade.
            state:
              type: string
              description: Nome do estado (informar a UF).
            country:
              type: string
              description: Nome do país.
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
      required:
        - name
        - alias
        - password
        - program
        - holder

    createVirtualCardRequestPci:
      type: object
      properties:
        name:
          type: string
          description: "Nome que será impresso no cartão. <b>Observação</b>: não é permitido o uso de números e caracteres especiais. Tamanho máximo de 19 caracteres."
        alias:
          type: string
          description: "Apelido do cartão. <b>Observação</b>: não é permitido o uso de caracteres especiais. Tamanho máximo de 16 caracteres."
        password:
          type: string
          description: Senha de uso do cartão. A senha deve possuir <b>quatro dígitos</b> e ser transmitida <b>criptografada</b> em formato base64.
        program:
          $ref: "#/components/schemas/program"
        holder:
          $ref: "#/components/schemas/holder"
        metadata:
          type: object
          description: Objeto que deverá conter informações adicionais pertinentes ao contexto, representadas por meio de pares de chave e valor.
        paymentDay:
          type: string
          description: Dia de vencimento da fatura.
        address:
          type: object
          description: Informações sobre endereço (se não for informado, será utilizado o endereço de cadastro do cliente).
          properties:
            zipCode:
              type: string
              description: CEP (informar somente os números).
            address:
              type: string
              description: Logradouro (Nome da rua, avenida etc.).
            number:
              type: string
              description: Número do prédio ou da casa.
            neighborhood:
              type: string
              description: Nome do bairro.
            complement:
              type: string
              description: Complemento do endereço.
            city:
              type: string
              description: Nome da cidade.
            state:
              type: string
              description: Nome do estado (informar a UF).
            country:
              type: string
              description: Nome do país.
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
      required:
        - name
        - alias
        - password
        - program
        - holder
    
    createCardsInLotRequest:
      type: object
      properties:
        programId:
          type: integer
          description: Identificador do programa que será vinculado ao cartão.
        quantityCards:
          type: integer
          description: Quantidade de cartões em lote (informar um valor acima de 0 e menor que 2000).
        paymentDay:
          type: integer
          description: Dia de pagamento do cartão.
        address:
          type: object
          description: Informações sobre o endereço de entrega.
          properties:
            zipCode:
              type: string
              description: CEP (informar somente os números).
            address:
              type: string
              description: Logradouro (Nome da rua, avenida etc.).
            number:
              type: string
              description: Número do prédio ou da casa.
            neighborhood:
              type: string
              description: Nome do bairro.
            complement:
              type: string
              description: Complemento do endereço.
            city:
              type: string
              description: Nome da cidade.
            state:
              type: string
              description: Nome do estado (informar a UF).
            country:
              type: string
              description: Nome do país.
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
      required:
        - programId
        - quantityCards
        - address

    creditContractStatus:
      type: string
      enum:
        - Pending
        - Approved
        - Reproved
        - Canceled
        - Expired
        - Signed
        - Blocked
    
    createCustomerRequest:
      type: object
      properties:
        name:
          type: string
          description: Nome completo do cliente.
        socialName:
          type: string
          description: Nome pelo qual a pessoa gostaria de ser chamada. Saiba mais consultando a [Cartilha do nome social](https://www.mds.gov.br/webarquivos/publicacao/assistencia_social/Folders/cartilha_nome_social.pdf).
        motherName:
          type: string
          description: Nome da mãe do cliente.
        birthDate:
          type: string
          format: date-time
          description: Data de nascimento do cliente.
        programId:
          type: string
          description: Identificador do programa que será vinculado ao cartão.
        documentNumber:
          type: string
          description: Número do documento (CPF ou CNPJ). Informe somente números. 
        profession:
          type: string
          description: Profissão do cliente.
        maritalStatus:
          $ref: "#/components/schemas/maritalStatus"
        academicDegree:
          $ref: "#/components/schemas/academicDegree"
        incomeBracket:
          $ref: "#/components/schemas/incomeBracket"
        sex:
          $ref: "#/components/schemas/sex"
        email:
          type: string
          format: email
          description: E-mail do cliente.
        phone:
          type: object
          description: Número de telefone do cliente, com o DDD.
          properties:
            type:
              $ref: "#/components/schemas/phoneType"
            value:
              type: string
              description: Número do telefone do cliente.
            countryCode:
              type: string
              description: Código DDI do país.
          required:
            - type
            - value
            - countryCode
        address:
          $ref: "#/components/schemas/addressRequest"
      required:
        - programId
        - documentNumber
        - profession
        - maritalStatus
        - academicDegree
        - incomeBracket
        - sex
        - email
        - phone
        - address
    
    createCustomerResponse:
      type: object
      properties:
        companyKey:
          type: string
          description: Chave que identifica o parceiro dentro do Bankly.
        document:
          type: string
          description: Número de documento do cliente (CPF ou CNPJ).
        contract:
          type: string
          description: Número do contrato de crédito.
  
    createDuplicateCardRequest:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/duplicateCardStatus"
        documentNumber:
          type: string
          description: Número de documento de CPF ou CNPJ (informe somente os números).
        description:
          type: string
          description: Detalhes do cancelamento com qualquer informação considerada como relevante.
        password:
          type: string
          description: "Senha do cartão atual (primeira via) para realizar transações (preencha com quatro campos números. Exemplo: '9348')."
        address:
          type: object
          description: Informações sobre endereço (se não for informado será utilizado o endereço de cadastro do cliente).
          properties:
            zipCode:
              type: string
              description: CEP (informar somente os números).
            address:
              type: string
              description: Logradouro (Nome da rua, avenida etc.).
            number:
              type: string
              description: Número do prédio ou da casa.
            neighborhood:
              type: string
              description: Nome do bairro.
            complement:
              type: string
              description: Complemento do endereço.
            city:
              type: string
              description: Nome da cidade.
            state:
              type: string
              description: Nome do estado (informar a UF).
            country:
              type: string
              description: Nome do país.
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
      required:
        - status
        - documentNumber
        - description
        - password

    createDuplicateCardRequestPci:
      type: object
      properties:
        description:
          type: string
          description: Detalhes do cancelamento com qualquer informação considerada como relevante.
        status:
          $ref: "#/components/schemas/duplicateCardStatus"
        holder:
          $ref: "#/components/schemas/holderPci"   
        password:
          type: string
          description: Senha do cartão atual (primeira via). A senha deve possuir <b>quatro dígitos</b> e ser transmitida <b>criptografada</b> em formato base64.
        resetPassword:
          type: boolean
          description: "Indica se o sistema deve gerar uma nova senha aleatória para o cartão durante a solicitação de segunda via (true) ou se deve manter a senha atual (false). <b>Importante</b>: caso este campo não seja preenchido, será adotado o valor padrão (false)."
        address:
          type: object
          description: Informações sobre endereço (se não for informado, será utilizado o endereço de cadastro do cliente).
          properties:
            zipCode:
              type: string
              description: CEP (informar somente os números).
            address:
              type: string
              description: Logradouro (Nome da rua, avenida etc.).
            number:
              type: string
              description: Número do prédio ou da casa.
            neighborhood:
              type: string
              description: Nome do bairro.
            complement:
              type: string
              description: Complemento do endereço.
            city:
              type: string
              description: Nome da cidade.
            state:
              type: string
              description: Nome do estado (informar a UF).
            country:
              type: string
              description: Nome do país.
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
        embossingCustomFields:
          $ref: "#/components/schemas/embossingFields"
        metadata:
          type: object
          description: Objeto que deverá conter informações adicionais pertinentes ao contexto, representadas por meio de pares de chave e valor.
      required:
        - description
        - status
        - holder
        - password

    creditErrorResponse:
      type: object
      properties:
        reference:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: integer
              message:
                type: string
              reasons:
                type: string
    
    creditEvaluationStatus:
      type: string
      enum:
        - Approved
        - Reproved

    CreditReanalyzeOriginType:
      enum:
      - COMPANY_REQUEST
      - CUSTOMER_REQUEST
      type: string

    dataPciResponse:
      type: object
      properties:
        cardNumber:
          type: string
          description: Numeração do cartão.
        cvv:
          type: string
          description: Código de segurança do cartão.
        expirationDate:
          type: string
          description: Data de expiração do cartão (formato 'MM/YY').
    
    document:
      type: object
      description: Objeto que deverá conter informações sobre o documento titular do cartão.
      required:
        - value
        - type
      properties:
        value: 
          type: string
          description: Número do documento do titular do cartão.
        type:
          type: string
          description: Tipo do documento utilizado (CPF ou CNPJ).
    
    dueDateAlterationRequest:
      type: object
      required:
        - documentNumber
        - day
      properties:
        documentNumber:
          type: string
          description: Número do documento (CPF ou CNPJ). Informe somente números.
        day:  
          type: number
          format: integer
          description: Novo dia de vencimento da fatura do cartão.

    duplicateCardStatus:
      type: string
      description: Motivo da emissão da segunda via.
      enum:
        - LostMyCard
        - CardWasStolen
        - CardWasDamaged
        - CardNotDelivered
        - UnrecognizedOnlinePurchase

    embossingFields:
      type: object
      description: "Objeto com informações sobre os campos customizáveis de <i>embossing</i> do cartão. <b>Importante</b>: dependendo da configuração do programa, o envio deste objeto e de suas propriedades poderá ser obrigatório."
      properties:
        shippingType:
          type: integer
          description: "Tipo de envio. <b>Observação</b>: este campo deve ser preenchido com o valor 0, que representa “envio normal”."
        isholder:
          type: boolean
          description: Indica se o cartão enviado pertence ao titular (true) ou não (false).
        cardsPerEnvelope:
          type: number
          description: "Quantidade de cartões no envelope. <b>Observação</b>: informe um valor entre 1 e 99."
        plasticCode:
          type: string
          description: "Código utilizado para identificar o tipo de plástico que será utilizado no <i>embossing</i> do cartão. <b>Observação</b>: Tamanho máximo de quatro dígitos."
        embossingKitType:
          type: string
          description: "Código do tipo do kit de <i>embossing</i> a ser utilizado. <b>Observação</b>: Tamanho máximo de quatro dígitos."
        specialNeeds:
          $ref: "#/components/schemas/SpecialNeeds"

    entryModeTypes:
      type: string
      enum:
        - Unknown
        - Manual
        - MagneticStripe
        - BarCodeReader
        - OCR
        - Chip
        - ContactlessObsolete
        - ContactlessMChip
        - ContactlessMChipObsolete
        - EletronicCommerce
        - CredentialOnFile
        - HybridTerminalFailedConnection
        - ChipCapableTerminal
        - EletronicCommerceSecureWithUCAF
        - Server
        - MagneticStripeFullTrackData
        - ContactlessMagneticStripe
        - ContactlessInput
        - Visa

    FunctionalityType:
      enum:
        - Pos
        - Debit
      type: string
      nullable: false
    
    generateTokenRequest:
      type: object
      properties:
        nonce:
          type: string
          description: "Valor, em formato hexadecimal, gerado no dispositivo que associa uma sessão de cliente a um token ID da Apple, obtido via SDK da Apple. **Importante**: este campo <b>somente</b> será considerado em caso de adição à wallet da ApplePay."
        nonceSignature:
          type: string
          description: "Assinatura, em formato hexadecimal, gerada no dispositivo que associa uma sessão de cliente a um token ID da Apple, obtido via SDK da Apple. **Importante**: este campo <b>somente</b> será considerado em caso de adição à wallet da ApplePay."
        appleCertificate:
          type: string
          description: "Listas de certificados do dispositivo, em formato PEM, obtidos via SDK da Apple. **Importante**: este campo <b>somente</b> será considerado em caso de adição à wallet da ApplePay."

    generateActivationDataResponse:
      type: object
      properties:
        data:
          type: string
          description: <em>Token</em>, em formato base64, que deverá ser utilizado na formulação do desafio.
    
    getContractCreditResponse:
      type: object
      properties:
        name:
          type: string
          description: Nome completo do cliente.
        socialName:
          type: string
          description: Nome pelo qual a pessoa gostaria de ser chamada. Saiba mais consultando a [Cartilha do nome social](https://www.mds.gov.br/webarquivos/publicacao/assistencia_social/Folders/cartilha_nome_social.pdf).
        motherName:
          type: string
          description: Nome da mãe do cliente.
        birthDate:
          type: string
          format: date-time
          description: Data de nascimento do cliente.
        programId:
          type: string
          description: Identificador do programa que será vinculado ao cartão.
        documentNumber:
          type: string
          description: Número de documento do cliente (CPF ou CNPJ).
        profession:
          type: string
          description: Profissão do cliente.
        cardProxy:
          type: string
          description: Código identificador (proxy) do cartão.
        status:
          type: string
          description: Situação do contrato de crédito.
          $ref: "#/components/schemas/creditContractStatus"
        contract:
          type: string
          description: Número do contrato de crédito.
        maritalStatus:
          $ref: "#/components/schemas/maritalStatus"
        academicDegree:
          $ref: "#/components/schemas/academicDegree"
        incomeBracket:
          $ref: "#/components/schemas/incomeBracket"
        incomeBracketRange:
          type: number
          description: Valor intermediário da faixa salarial do cliente.
        expirationDate:
          type: string
          description: Data de expiração da proposta de crédito.
        sex:
          $ref: "#/components/schemas/sex"
        email:
          type: string
          format: email
          description: E-mail do cliente.
        address:
          $ref: "#/components/schemas/address"
        phone:
          type: object
          description: Número de telefone do cliente, com DDD.
          properties:
            type:
              $ref: "#/components/schemas/phoneType"
            value:
              type: string
              description: Número do telefone do cliente.
            countryCode:
              type: string
              description: Código DDI do país.
        creditEvaluation:
          type: object
          properties:
            status:
              type: string
              description: Situação da avaliação de crédito.
              $ref: "#/components/schemas/creditEvaluationStatus"
            evaluatedAt:
              type: string
              format: date-time
              description: Data em que ocorreu a avaliação.
            reasonRefusal:
              type: string
              description: Motivo de reprovação.
            policy:
              type: string
              description: Política utilizada na avaliação.
        acceptanceTerm:
          $ref: "#/components/schemas/acceptanceTerm"
        acceptanceTermHistory:
          type: array
          items:
            $ref: "#/components/schemas/acceptanceTerm"
  
    getDataPciRequest:
      type: object
      properties:
        password:
          type: string
          description: Senha informada na criação do cartão (4 dígitos).
      required:
        - password
    
    holder:
      type: object
      description: Objeto com informações sobre o titular do cartão.
      required: 
        - document
        - account
      properties: 
        document:
          $ref: "#/components/schemas/document"
        account:
          $ref: "#/components/schemas/account"

    holderPci:
      type: object
      description: Objeto com informações sobre o titular do cartão.
      required: 
        - document
      properties: 
        document:
          $ref: "#/components/schemas/document"

    incomeBracket:
      type: string
      description: Faixa salarial do cliente.
      enum:
        - LessThousand
        - FromThousandToTwoThousand
        - FromTwoThousandToThreeThousand
        - FromThreeThousandToFiveThousand
        - FromFiveThousandToTenThousand
        - FromTenThousandToTwentyThousand
        - OverTwentyThousand

    limitAlterationRequest:
      type: object
      required:
        - documentNumber
        - contractNumber
        - limit
      properties:
        documentNumber:
          type: string
          description: Número de documento de CPF ou CNPJ. Informe somente os números.
        contractNumber:
          type: string
          description: Número do contrato do cliente.
        limit:
          type: number
          description: Novo limite de crédito ativo (definido pelo cliente).

    maritalStatus:
      type: string
      description: Estado civil do cliente.
      enum:
        - Single
        - Married
        - Separated
        - Divorced
        - Widower

    nextStatusResponse:
      type: array
      description: Lista de objetos contendo informações sobre os próximos status do cartão.
      items:
        type: object
        properties:
          value:
            type: string
            description: Próximo status do cartão.
          isDefinitive: 
            type: boolean
            description: Indica a reversibilidade do status, sendo TRUE para reversível e FALSE para irreversível.
    
    phoneType:
      type: string
      description: Tipo de telefone do cliente.
      enum:
        - Residential
        - Commercial
        - Mobile
   
    program:
      type: object
      description: Objeto que deverá conter informações sobre o programa do cartão previamente definido.
      required: 
        - id
      properties:
        id: 
          type: string
          description: Identificador do programa previamente definido.
    
    ReanalyzeCreditDto:
      type: object
      required:
        - origin
      properties:
        origin:
          description: Solicitante do chamado de reanálise.
          $ref: "#/components/schemas/CreditReanalyzeOriginType"
      additionalProperties: false
    
    resultTransactionResponse:
      type: object
      properties:
        nextPage:
          type: string
          description: Identificador da próxima página.
        hasLastPage:
          type: boolean
          description: Indica se existe a próxima página na consulta.
        transactions:
          type: array
          description: Transações do cartão.
          items:
            type: object
            properties:
              account:
                type: object
                properties:
                  number: 
                    type: string
                    description: Número da conta para o qual o cartão foi transacionado.
                  agency: 
                    type: string
                    description: Agência da conta para o qual o cartão foi transacionado.
              amount:
                type: object
                properties:
                  value: 
                    type: number
                    description: Valor total da transação.
                  local: 
                    type: number
                    description: Valor da transação na moeda local.
                  net: 
                    type: number
                    description: Valor líquido da transação.
                  iof: 
                    type: number
                    description: Valor do Imposto de Operações Financeiras.
                  markup: 
                    type: number
                    description: Tarifa de conversão de moeda em caso de compras internacionais.
              merchant:
                type: object
                properties:
                  id: 
                    type: string
                    description: Identificador do comerciante.
                  name: 
                    type: string
                    description: Nome do comerciante.
                  mcc: 
                    type: string
                    description: Código identificador do ramo de negócio do comerciante.
                  city: 
                    type: string
                    description: Cidade onde ocorreu a transação.
              authorizationCode:
                type: string
                description: Identificador da transação na adquirente.
              countryCode:
                type: string
                description: Código do país onde ocorreu a transação.
              currencyCode:
                type: string
                description: Código da moeda em que foi realizada a transação.
              entryMode:
                type: string
                $ref: "#/components/schemas/entryModeTypes"
                description: Identificador da forma que a transação foi realizada.
              status:
                type: string
                $ref: "#/components/schemas/transactionsStatus"
                description: Situação da transação.
              transactionTimestamp:
                type: string
                description: Data em que ocorreu a transação (formato ISO 8601 - UTC).
              transactionType:
                type: string
                $ref: "#/components/schemas/transactionTypes"
                description: Indica a operação da transação.

    sex:
      type: string
      description: Gênero do cliente.
      enum:
        - Male
        - Female
        - Other
    
    SpecialNeeds:
      type: object
      description: Objeto com informações referentes a possíveis necessidades especiais titular do cartão.
      properties:
        hasSpecialNeeds:
          type: boolean
          description: Campo que identifica se o titular do cartão é uma pessoa com necessidades especiais (true para sim, false para não).
        code: 
          type: string
          description: Código da necessidade especial. Caso tenha preenchido false (não) na propriedade anterior, informe NULL.

    TraceDto:
      type: object
      required:
        - state
        - date
      properties:
        state:
          type: string
          description: Log de navegação do cliente nas telas do frontend, desde o login até a tela de aceite.
          nullable: true
        date:
          type: string
          format: date-time
          description: Data do aceite.
          nullable: true
      additionalProperties: false
    
    trackingErrorResponse:
      type: object
      properties:
        reference:
          type: string
          description: Link para documentação de integração.
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                description: Código de erro.
              message:
                type: string
                description: Mensagem explicativa do erro.
                  
    trackingResponse:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
          description: Data de criação do rastreio.
        externalTracking:
          type: object
          description: Objeto para rastreio de serviço externo.
          properties:
            code:
              type: string
              description: Código de rastreio junto ao serviço externo.
            partner: 
              type: string
              description: Nome do parceiro do serviço externo.
        name:
          type: string
          description: Nome impresso no cartão.
        alias:
          type: string
          description: Apelido impresso no cartão.
        estimatedDeliveryDate:
          type: string
          format: date-time
          description: Data prevista da entrega do cartão.
        address:
          type: array
          description: Lista de endereços do rastreio.
          items:
            properties:
              zipCode:
                type: string
                description: CEP (informar somente os números).
              address:
                type: string
                description: Logradouro (Nome da rua, avenida etc.).
              number:
                type: string
                description: Número do prédio ou da casa.
              neighborhood:
                type: string
                description: Nome do bairro.
              complement:
                type: string
                description: Complemento do endereço.
              city:
                type: string
                description: Nome da cidade.
              state:
                type: string
                description: Nome do estado (informar a UF).
              country:
                type: string
                description: Nome do país.
              isActive:
                type: boolean
                description: Situação de endereço de rastreio.
        status:
          type: array
          description: Histórico de status do rastreio.
          items:
            type: object
            properties:
              createdDate:
                type: string
                format: date-time
                description: Data em que o status foi aplicado.
              type:
                type: string
                $ref: "#/components/schemas/trackingStatus"
                description: Status aplicado.
              reason:
                type: string
                description: Motivo do status.
        finalized:
          type: array
          description: Histórico de baixa do rastreio.
          items:
            type: object
            properties:
              createdDate:
                type: string
                format: date-time
                description: Data em que a baixa foi adicionada.
              recipientName:
                type: string
                description: Nome do recebedor do cartão.
              recipientKinship:
                type: string
                description: Grau de parentesco com o titular do cartão.
              documentNumber:
                type: string
                description: Número do documento do recebedor do cartão.
              attempts:
                type: number
                description: Quantidade de tentativas de entrega.

    trackingStatus:
      type: string
      enum:
        - Created
        - InProgress
        - NotDelivered
        - Cancelled
        - Custody
        - Delivered
    
    transactionsStatus:
      type: string
      enum:
        - TransactionHoldWasReproved
        - TransactionHoldWasApproved
        - TransactionWasReversed
        - TransactionHoldWasExpired
        - TransactionWasConfirmed
        - TransactionWasReversedInSecondInstance
        - TransactionVoucherWasCreated
   
    transactionTypes:
      type: string
      enum:
        - Unknown
        - Purchase
        - Withdrawal
        - Refund
        - Balance
    
    updateTrackingAddressRequest: 
          type: object
          description: Objeto que contém informações sobre o endereço para nova tentativa de entrega.
          properties:
            zipCode:
              type: string
              description: O CEP deve ser nacional e conter oito dígitos.
            address:
              type: string
              description: Logradouro (Nome da rua, avenida etc.) em que o cliente deseja receber o cartão.
            number:
              type: string
              description: Número do imóvel com até 10 caracteres (se não existir, substitua por “S/N”).
            neighborhood:
              type: string
              description: Nome do bairro para nova entrega.
            complement:
              type: string
              description: Complemento do endereço.
            city:
              type: string
              description: Nome da cidade para a entrega.
            state:
              type: string
              description: "Nome do estado (UF) do novo endereço de entrega. Deve-se respeitar o formato proposto pela ISO 3166-2:BR. Exemplo: SP."
            country:
              type: string
              description: "Serão aceitos apenas endereços em território nacional. Deve-se respeitar o formato proposto pela ISO 3166-1. Exemplo: BR."
          required:
            - zipCode
            - address
            - number
            - neighborhood
            - city
            - state
            - country
    
    UserInfoDto:
      type: object
      description: Objeto que contém os dados do usuário no momento em que solicitou o crédito.
      required:
        - address
        - customerId
        - mail
        - name
        - phone
      properties:
        address:
          type: string
          description: Endereço completo do cliente.
          nullable: true
        customerId:
          type: string
          description: Identificador único do cliente.
          nullable: true
        mail:
          type: string
          format: email
          description: E-mail do cliente.
          nullable: true
        name:
          type: string
          description: Nome completo do cliente
          nullable: true
        phone:
          type: string
          description: Número de telefone do cliente, com DDD.
          nullable: true
      additionalProperties: false
    
    walletFlows:
      type: string
      enum:
        - Undefined
        - GreenPatch
        - YellowPatch

    walletStatus:
      type: string
      enum:
        - Approved
        - Denied

    walletTypes:
      type: string
      description: Carteira digital à qual o cartão deverá ser adicionado.
      enum:
        - GooglePay
        - ApplePay
    
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
  samples-languages:
    - curl
